// <auto-generated />
using System;
using ASafariM.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASafariM.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250217104912_FixDynamicValues")]
    partial class FixDynamicValues
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ASafariM.Domain.Entities.AccessibilityPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("EnableHighContrastMode")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableScreenReaderSupport")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TextScalingFactor")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AccessibilityPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Size")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Capital")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("IsoCode3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IsoCode")
                        .IsUnique();

                    b.HasIndex("IsoCode3")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("62c7c039-4adb-4026-8f09-2e603d13b8a3"),
                            Capital = "Brussels",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 732, DateTimeKind.Utc).AddTicks(8929),
                            IsActive = true,
                            IsoCode = "BE",
                            IsoCode3 = "BEL",
                            Name = "Belgium",
                            NativeName = "België",
                            PhoneCode = "+32"
                        },
                        new
                        {
                            Id = new Guid("3b85a039-5956-42d9-bdf9-9347b8884fa0"),
                            Capital = "Paris",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 732, DateTimeKind.Utc).AddTicks(9167),
                            IsActive = true,
                            IsoCode = "FR",
                            IsoCode3 = "FRA",
                            Name = "France",
                            NativeName = "France",
                            PhoneCode = "+33"
                        },
                        new
                        {
                            Id = new Guid("473f82b4-1028-4ff1-9d4e-fd609e7dd47d"),
                            Capital = "Berlin",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 732, DateTimeKind.Utc).AddTicks(9176),
                            IsActive = true,
                            IsoCode = "DE",
                            IsoCode3 = "DEU",
                            Name = "Germany",
                            NativeName = "Deutschland",
                            PhoneCode = "+49"
                        },
                        new
                        {
                            Id = new Guid("a1d5a8b0-a23f-4a5b-96c3-7c222acc9b94"),
                            Capital = "Amsterdam",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 732, DateTimeKind.Utc).AddTicks(9185),
                            IsActive = true,
                            IsoCode = "NL",
                            IsoCode3 = "NLD",
                            Name = "Netherlands",
                            NativeName = "Nederland",
                            PhoneCode = "+31"
                        },
                        new
                        {
                            Id = new Guid("e744222f-471c-4e4a-83a1-8e15431efbfe"),
                            Capital = "London",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 732, DateTimeKind.Utc).AddTicks(9193),
                            IsActive = true,
                            IsoCode = "GB",
                            IsoCode3 = "GBR",
                            Name = "United Kingdom",
                            NativeName = "United Kingdom",
                            PhoneCode = "+44"
                        },
                        new
                        {
                            Id = new Guid("396b7360-0760-480f-8582-4253c2564b18"),
                            Capital = "Rome",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 732, DateTimeKind.Utc).AddTicks(9201),
                            IsActive = true,
                            IsoCode = "IT",
                            IsoCode3 = "ITA",
                            Name = "Italy",
                            NativeName = "Italia",
                            PhoneCode = "+39"
                        },
                        new
                        {
                            Id = new Guid("dbc5b3eb-c2fd-4a3f-a5d0-3294b604e5d6"),
                            Capital = "Madrid",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 732, DateTimeKind.Utc).AddTicks(9209),
                            IsActive = true,
                            IsoCode = "ES",
                            IsoCode3 = "ESP",
                            Name = "Spain",
                            NativeName = "España",
                            PhoneCode = "+34"
                        },
                        new
                        {
                            Id = new Guid("f6846cb7-90ab-4951-ad67-67e9df3ff7fc"),
                            Capital = "Bern",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 732, DateTimeKind.Utc).AddTicks(9217),
                            IsActive = true,
                            IsoCode = "CH",
                            IsoCode3 = "CHE",
                            Name = "Switzerland",
                            NativeName = "Schweiz",
                            PhoneCode = "+41"
                        },
                        new
                        {
                            Id = new Guid("51b8ff4c-d912-40dc-a1b2-07a84254a55b"),
                            Capital = "Vienna",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 732, DateTimeKind.Utc).AddTicks(9224),
                            IsActive = true,
                            IsoCode = "AT",
                            IsoCode3 = "AUT",
                            Name = "Austria",
                            NativeName = "Österreich",
                            PhoneCode = "+43"
                        },
                        new
                        {
                            Id = new Guid("3a7a0867-b04d-4180-9625-e65899b4a2f2"),
                            Capital = "Luxembourg",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 732, DateTimeKind.Utc).AddTicks(9232),
                            IsActive = true,
                            IsoCode = "LU",
                            IsoCode3 = "LUX",
                            Name = "Luxembourg",
                            NativeName = "Luxembourg",
                            PhoneCode = "+352"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DecimalPlaces")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0014aee9-ad30-40d9-be5b-88afd0779ccf"),
                            Code = "EUR",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 729, DateTimeKind.Utc).AddTicks(3057),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "Euro",
                            Symbol = "€"
                        },
                        new
                        {
                            Id = new Guid("7e32f51e-90cc-4a8c-93f9-9f4ce1f5e154"),
                            Code = "USD",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 729, DateTimeKind.Utc).AddTicks(3626),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "US Dollar",
                            Symbol = "$"
                        },
                        new
                        {
                            Id = new Guid("842dd16d-a75a-446a-b46c-ed2349467855"),
                            Code = "GBP",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 729, DateTimeKind.Utc).AddTicks(3640),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "British Pound",
                            Symbol = "£"
                        },
                        new
                        {
                            Id = new Guid("aede3ab6-a612-4a8f-8796-e872216872aa"),
                            Code = "CHF",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 729, DateTimeKind.Utc).AddTicks(3649),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "Swiss Franc",
                            Symbol = "Fr."
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.DateFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Example")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Format")
                        .IsUnique();

                    b.ToTable("DateFormats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c03f91a8-4354-4c04-9b72-ad568cf4c93f"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 729, DateTimeKind.Utc).AddTicks(1323),
                            DisplayName = "Belgian/European Date Format",
                            Example = "31/12/2024",
                            Format = "dd/MM/yyyy",
                            IsActive = true,
                            IsDefault = false
                        },
                        new
                        {
                            Id = new Guid("d863c296-1c4e-403c-9ff5-406c825d0156"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 729, DateTimeKind.Utc).AddTicks(2187),
                            DisplayName = "Belgian Date Format (Dot)",
                            Example = "31.12.2024",
                            Format = "dd.MM.yyyy",
                            IsActive = true,
                            IsDefault = false
                        },
                        new
                        {
                            Id = new Guid("5a4540b1-9525-4b2f-93f5-38d870ae50a0"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 729, DateTimeKind.Utc).AddTicks(2216),
                            DisplayName = "US Date Format",
                            Example = "12/31/2024",
                            Format = "MM/dd/yyyy",
                            IsActive = true,
                            IsDefault = false
                        },
                        new
                        {
                            Id = new Guid("8a19c6cc-b855-4012-88ae-936b32512390"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 729, DateTimeKind.Utc).AddTicks(2229),
                            DisplayName = "ISO Date Format",
                            Example = "2024-12-31",
                            Format = "yyyy-MM-dd",
                            IsActive = true,
                            IsDefault = false
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.FileFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxSizeInMB")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("SupportsAnnotations")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SupportsEditing")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Extension")
                        .IsUnique();

                    b.HasIndex("MimeType")
                        .IsUnique();

                    b.ToTable("FileFormats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("53513d05-0770-42b3-965d-c78ea7ba229d"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 728, DateTimeKind.Utc).AddTicks(7951),
                            Description = "Simple text document format",
                            Extension = ".txt",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "text/plain",
                            Name = "Plain Text",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("de7f2baf-288e-4558-98b0-0040e4ace0c6"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 728, DateTimeKind.Utc).AddTicks(8911),
                            Description = "TypeScript source code file",
                            Extension = ".ts",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/typescript",
                            Name = "TypeScript",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("421880fb-5204-45b5-b555-7d3beb5c7c1e"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 728, DateTimeKind.Utc).AddTicks(8932),
                            Description = "TypeScript React component file",
                            Extension = ".tsx",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/typescript+react",
                            Name = "TypeScript React",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("6d2f45c6-f258-442c-8833-46988aefb58e"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 728, DateTimeKind.Utc).AddTicks(8941),
                            Description = "JavaScript source code file",
                            Extension = ".js",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/javascript",
                            Name = "JavaScript",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("dd41d1b3-24ee-4436-9bb3-939e826cf489"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 728, DateTimeKind.Utc).AddTicks(8948),
                            Description = "JavaScript Object Notation data file",
                            Extension = ".json",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/json",
                            Name = "JSON",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("9afc09f5-4f3d-4e1e-b540-bd0c6796bf87"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 728, DateTimeKind.Utc).AddTicks(8956),
                            Description = "Markdown text format",
                            Extension = ".md",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "text/markdown",
                            Name = "Markdown",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.GeographicalPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DateFormatId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TimeZoneId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DateFormatId");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.LanguagePreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("LanguagePreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Link");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AuthorName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParentMdFileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParentMdFileId");

                    b.HasIndex("ProjectId");

                    b.ToTable("MarkdownFiles");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ChangedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ContentSnapshot")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("MarkdownFileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MarkdownFileId");

                    b.ToTable("MarkdownFileHistories");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileUser", b =>
                {
                    b.Property<Guid>("MarkdownFileId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("CollaborationRole")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CollaborationStopDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateCollaborated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MarkdownFileId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MarkdownFileUsers");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MiscellaneousPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DefaultDashboardView")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EnableAutoSave")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableRealTimeUpdates")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("FileFormatId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PaginationSettingsId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("ShowActivityTimeline")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FileFormatId");

                    b.HasIndex("PaginationSettingsId");

                    b.ToTable("MiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.NotificationPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AllowMarketingEmails")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsSubscribedToNewsletter")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NotificationFrequencyInHours")
                        .HasColumnType("int");

                    b.Property<bool>("ReceiveEmailNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ReceiveSmsNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("NotificationPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PaginationSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("EnableInfiniteScroll")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ItemsPerPage")
                        .HasColumnType("int");

                    b.Property<string>("PageSizeOptions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("ShowFirstLastButtons")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowItemsCount")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowPageNumbers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowPageSizeSelector")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VisiblePageRange")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaginationSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ccc5fee1-798c-4e8a-af2d-5fd62554c4b3"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 728, DateTimeKind.Utc).AddTicks(9590),
                            EnableInfiniteScroll = false,
                            IsActive = true,
                            IsDefault = false,
                            ItemsPerPage = 10,
                            PageSizeOptions = "[10,20,50,100]",
                            ShowFirstLastButtons = true,
                            ShowItemsCount = true,
                            ShowPageNumbers = true,
                            ShowPageSizeSelector = true,
                            VisiblePageRange = 5
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.PrimitiveCollection<string>("AudioUrls")
                        .HasColumnType("longtext");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Excerpt")
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("ImageUrls")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Slug")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusColor")
                        .HasColumnType("longtext");

                    b.Property<string>("StatusIcon")
                        .HasColumnType("longtext");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("StatusTooltip")
                        .HasColumnType("longtext");

                    b.Property<string>("Summary")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("VideoUrls")
                        .HasColumnType("longtext");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("PostId");

                    b.ToTable("PostAttachment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PostId");

                    b.ToTable("PostCategory");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostCollaborator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CollaboratorId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CollaboratorId");

                    b.HasIndex("PostId");

                    b.ToTable("PostCollaborator");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CommentedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CommenterId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CommenterId");

                    b.HasIndex("PostId");

                    b.ToTable("PostComment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LinkId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.HasIndex("PostId");

                    b.ToTable("PostLink");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelatedPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostRelatedPost");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostTag", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PrivacyPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AllowDataSharing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowSearchByEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("EnableTwoFactorAuthentication")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsProfilePublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("PrivacyPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProgressHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double?>("ActualCost")
                        .HasColumnType("double");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("BudgetVariance")
                        .HasColumnType("double");

                    b.Property<int>("CompletedMilestones")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MitigationPlan")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<double?>("PlannedBudget")
                        .HasColumnType("double");

                    b.Property<DateTime?>("PlannedEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PlannedStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("RiskDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RiskLevel")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatusReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("TimeVarianceInDays")
                        .HasColumnType("int");

                    b.Property<int>("TotalMilestones")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.HasIndex("StatusReason")
                        .IsUnique();

                    b.ToTable("ProgressHistories");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double?>("ActualBudget")
                        .HasColumnType("double");

                    b.Property<double?>("Budget")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("IsCancelledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("IsCancelledby")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("IsCompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("IsCompletedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsExtended")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("IsExtendedTo")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("IsPausedTo")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("MarkdownFileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<double?>("RemainingBudget")
                        .HasColumnType("double");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MarkdownFileId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProjectMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ProjectMemberType")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e9409f40-b12c-43b5-b2d0-2e8343dc62b0"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 728, DateTimeKind.Utc).AddTicks(6147),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Admin role has full administrative privileges, except for application management.",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("8faab8ce-7fde-4b59-80d4-cc6dc8bf154e"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 728, DateTimeKind.Utc).AddTicks(6737),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Manages user interactions and content moderation. They can create and manage their own tasks, projects, and content, and can edit other public articles than their own.",
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("92184ec0-a5bf-4ce6-9141-0f80c3a25e08"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 728, DateTimeKind.Utc).AddTicks(6751),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "User role with limited privileges. A user can create and manage their own tasks, projects, and content, and cannot edit other public articles than their own.",
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("5ad63c9f-6699-4d4d-bf7d-65bfb7ac3a63"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 728, DateTimeKind.Utc).AddTicks(6760),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Guest role is the least privileged role. They can only view public articles.",
                            Name = "Guest"
                        },
                        new
                        {
                            Id = new Guid("6e58fcb7-476a-4d73-a6da-c5479c905672"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 728, DateTimeKind.Utc).AddTicks(6767),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Focuses on content creation and management without full administrative privileges. They can create and manage their own articles, but cannot edit other public articles than their own.",
                            Name = "Editor"
                        },
                        new
                        {
                            Id = new Guid("ae988741-9be7-4523-adb6-9030ab0e9215"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 728, DateTimeKind.Utc).AddTicks(6775),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Has full control over the application and can manage all aspects.",
                            Name = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.SitemapItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessByRole")
                        .HasColumnType("int");

                    b.Property<string>("ArchivedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangeFrequency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExternalLink")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUnpublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParentItemId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Priority")
                        .HasColumnType("double");

                    b.Property<string>("PublishedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("SitemapItemId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UnpublishBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UnpublishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParentItemId");

                    b.HasIndex("SitemapItemId");

                    b.ToTable("SitemapItems");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Slug")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6d0e0f00-6097-43e1-986e-777ab6f9c6ca"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Tag description",
                            Name = "Test Tag name",
                            Slug = "test-tag-slug"
                        },
                        new
                        {
                            Id = new Guid("0b555e7a-4ff7-416f-ab31-dbdd34e29cb4"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Tag description 2",
                            Name = "Test Tag name 2",
                            Slug = "test-tag-slug-2"
                        },
                        new
                        {
                            Id = new Guid("343f0de1-80f0-4819-92c3-8d5a35dc03b4"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Tag description 3",
                            Name = "Test Tag name 3",
                            Slug = "test-tag-slug-3"
                        },
                        new
                        {
                            Id = new Guid("89b795b2-02e6-40c2-bcec-615a3a940bb0"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Tag description 4",
                            Name = "Test Tag name 4",
                            Slug = "test-tag-slug-4"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ThemePreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccentColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("DarkModeBackgroundColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DarkModePrimaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DarkModeTextColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FontSize")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDarkModeEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDarkTheme")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHighContrastModeEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReducedMotionEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LightModeBackgroundColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LightModePrimaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LightModeTextColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PrimaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SecondaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TertiaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("ThemePreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.TimeZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DstOffset")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("UsesDaylightSaving")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UtcOffset")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("StandardName")
                        .IsUnique();

                    b.ToTable("TimeZones");

                    b.HasData(
                        new
                        {
                            Id = new Guid("651bd8f9-ad8e-41f3-9ef6-233b7b3029d8"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 729, DateTimeKind.Utc).AddTicks(4224),
                            DstOffset = "+02:00",
                            IsActive = true,
                            Name = "CET",
                            StandardName = "Central European Time (Belgium)",
                            UsesDaylightSaving = true,
                            UtcOffset = "+01:00"
                        },
                        new
                        {
                            Id = new Guid("aeb392c1-acc3-4ba9-a6f0-ca0f6c6bbf38"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 729, DateTimeKind.Utc).AddTicks(5202),
                            DstOffset = "+02:00",
                            IsActive = true,
                            Name = "CEST",
                            StandardName = "Central European Summer Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+02:00"
                        },
                        new
                        {
                            Id = new Guid("f1f6c6ab-a8c1-41c8-9e4b-7458f1f5b4bc"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 729, DateTimeKind.Utc).AddTicks(5231),
                            DstOffset = "+02:00",
                            IsActive = true,
                            Name = "UTC",
                            StandardName = "Coordinated Universal Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+00:00"
                        },
                        new
                        {
                            Id = new Guid("1aa4e3c7-96db-4fc6-8da9-bd7fad50bd72"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 729, DateTimeKind.Utc).AddTicks(5243),
                            DstOffset = "+01:00",
                            IsActive = true,
                            Name = "WET",
                            StandardName = "Western European Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+00:00"
                        },
                        new
                        {
                            Id = new Guid("994aeb3c-38f2-4e6e-a8fb-ae879362f334"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 729, DateTimeKind.Utc).AddTicks(5253),
                            DstOffset = "+03:00",
                            IsActive = true,
                            Name = "EET",
                            StandardName = "Eastern European Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+02:00"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("ParentTopicId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParentTopicId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 733, DateTimeKind.Utc).AddTicks(2718),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Test Topic description",
                            Name = "Test Topic name",
                            Slug = "test-topic-slug"
                        },
                        new
                        {
                            Id = new Guid("e9932ff4-0049-41ba-bc35-1c9425909201"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 733, DateTimeKind.Utc).AddTicks(3460),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Test Topic description 2",
                            Name = "Test Topic name 2",
                            ParentTopicId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Slug = "test-topic-slug-2"
                        },
                        new
                        {
                            Id = new Guid("81ad75f4-2a5f-4c0b-8efd-3a345c9fff76"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 733, DateTimeKind.Utc).AddTicks(3636),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Test Topic description 3",
                            Name = "Test Topic name 3",
                            Slug = "test-topic-slug-3"
                        },
                        new
                        {
                            Id = new Guid("de7c68ff-b8b4-4e1e-9942-0d6675798a89"),
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 9, 733, DateTimeKind.Utc).AddTicks(3648),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Test Topic description 4",
                            Name = "Test Topic name 4",
                            ParentTopicId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Slug = "test-topic-slug-4"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ForgotPasswordToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ForgotPasswordTokenExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBannedByAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEditor")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsModerator")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPending")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsStandardUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LinkUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PasswordResetToken")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PasswordResetTokenExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PenName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool?>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext");

                    b.Property<string>("ReactivationReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReactivationRequestedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool?>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .IsUnique();

                    b.HasIndex("NormalizedUserName")
                        .IsUnique();

                    b.HasIndex("PostId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "demo_admin@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 8, 715, DateTimeKind.Utc).AddTicks(8822),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "demo_admin@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "Demo Admin",
                            IsActive = true,
                            IsAdmin = true,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = true,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 49, 8, 715, DateTimeKind.Utc).AddTicks(6733),
                            LastName = "Account",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO_ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "DEMO_ADMIN",
                            PasswordHash = "fKRU3+sJWXI4Ty9cdR2cc6NUYaeb9F6eJRE9QM0LC3iPGlnJ8Q6wS19Dz4X4PAG7",
                            PhoneNumber = "+123456789",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "demo_admin@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 49, 8, 715, DateTimeKind.Utc).AddTicks(9267),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "demo_admin"
                        },
                        new
                        {
                            Id = new Guid("1048da39-cdaf-47a9-9fb1-960d81dd704b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "demo_user@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 8, 765, DateTimeKind.Utc).AddTicks(1958),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "demo_user@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "Demo User",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 49, 8, 765, DateTimeKind.Utc).AddTicks(1930),
                            LastName = "Account",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO_USER@EXAMPLE.COM",
                            NormalizedUserName = "DEMO_USER",
                            PasswordHash = "zQyXgrDx5iQLk8v+5OeF5aAHwEA+5looBL8XoQVSuWmZSCWYbrFSHUSYnRsH1eTq",
                            PhoneNumber = "+1234567890",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "demo_user@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 49, 8, 765, DateTimeKind.Utc).AddTicks(1961),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "demo_user"
                        },
                        new
                        {
                            Id = new Guid("1448da39-cdaf-47a9-9fb1-960d81dd704b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "asafarim.it@gmail.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 49, 8, 794, DateTimeKind.Utc).AddTicks(5703),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1990, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "asafarim.it@gmail.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "Deleted User",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 49, 8, 794, DateTimeKind.Utc).AddTicks(5673),
                            LastName = "Account",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASAFARIM.IT@GMAIL.COM",
                            NormalizedUserName = "DELETED_USER",
                            PasswordHash = "fKUJn9e72QeIghtGHWPw6A6Hz9PXFeKievsod3nDkn4h5nVrel4peb/6hSdQRMr4",
                            PhoneNumber = "+1234567890",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "asafarim.it@gmail.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 49, 8, 794, DateTimeKind.Utc).AddTicks(5706),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "deleted_user"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_1_a558@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_1_a558@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 1",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_1_A558@EXAMPLE.COM",
                            NormalizedUserName = "USER_1_A558",
                            PasswordHash = "QmH+2VYWvaSeMqeP4tCSn839GRWAaadUiY6r0qM1X3U4PdmJPLVsseg/hSon6rQu",
                            PhoneNumber = "+123456781",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_1_a558@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_1_a558"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_2_a986@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_2_a986@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 2",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_2_A986@EXAMPLE.COM",
                            NormalizedUserName = "USER_2_A986",
                            PasswordHash = "h+dw598g9oExgHOnq0pQpqLT71ciwTQOU6vyC11AsiMWd2MPsJXNkwZ2XAKULKxt",
                            PhoneNumber = "+123456782",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_2_a986@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_2_a986"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_3_b029@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_3_b029@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 3",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_3_B029@EXAMPLE.COM",
                            NormalizedUserName = "USER_3_B029",
                            PasswordHash = "f9u4OiFPy0lIR2uv2NJgxErH3rVjqASzHUO7YQh3ZJhMl6LLYNqGgbF5uU4hmmC7",
                            PhoneNumber = "+123456783",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_3_b029@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_3_b029"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_4_fb14@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_4_fb14@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 4",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_4_FB14@EXAMPLE.COM",
                            NormalizedUserName = "USER_4_FB14",
                            PasswordHash = "6CiXCjZ7YgbSMNzbcsTkMgLAg3e4+fUOfPQ3vcJeriYML5WbKgPUuaFQhnQSR//W",
                            PhoneNumber = "+123456784",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_4_fb14@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_4_fb14"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_5_54e1@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_5_54e1@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 5",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_5_54E1@EXAMPLE.COM",
                            NormalizedUserName = "USER_5_54E1",
                            PasswordHash = "jLC9ZkEskehkXpbBbiZVTuWfQ47RYFfgv8xzKnLQ4bquDO1E6EFS/WE7y+omFv9z",
                            PhoneNumber = "+123456785",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_5_54e1@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_5_54e1"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fba"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_6_4f82@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_6_4f82@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 6",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_6_4F82@EXAMPLE.COM",
                            NormalizedUserName = "USER_6_4F82",
                            PasswordHash = "yAwZ/hCo42jHhFLTTQth+lqh56nHEoF6AqisdCi1OxSDKX5nDWaWFm9xXFDG89ah",
                            PhoneNumber = "+123456786",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_6_4f82@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_6_4f82"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_7_e05f@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_7_e05f@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 7",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_7_E05F@EXAMPLE.COM",
                            NormalizedUserName = "USER_7_E05F",
                            PasswordHash = "3H02+jHvDWEbKhAOQTHQESmxbupN89Cc/Y9gOL+J1O2czuvVEgrR6Bh4VJ9xglcN",
                            PhoneNumber = "+123456787",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_7_e05f@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_7_e05f"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_8_feca@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_8_feca@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 8",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_8_FECA@EXAMPLE.COM",
                            NormalizedUserName = "USER_8_FECA",
                            PasswordHash = "CXsIHiqkVrRoeBZ+z9+721miEDKNKjksk1Sk6DNfrvcdq3jzqwq+gEjAHioMylUN",
                            PhoneNumber = "+123456788",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_8_feca@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_8_feca"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_9_8c72@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_9_8c72@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 9",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_9_8C72@EXAMPLE.COM",
                            NormalizedUserName = "USER_9_8C72",
                            PasswordHash = "1PWp7CtWdc7W9AtnMgQ8Rexcp4tV68tqvWFniQLrJ3GQ7fmDxGGxUvGrfd7CvKWA",
                            PhoneNumber = "+123456789",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_9_8c72@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_9_8c72"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbe"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_10_73e7@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_10_73e7@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 10",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_10_73E7@EXAMPLE.COM",
                            NormalizedUserName = "USER_10_73E7",
                            PasswordHash = "agoRQCVs73+ITefATLlhCxYlC2oYnlshG9Au57J+qQRA7bLOcbcWA5v4IGurkDJx",
                            PhoneNumber = "+1234567810",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_10_73e7@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_10_73e7"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_11_a323@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_11_a323@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 11",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_11_A323@EXAMPLE.COM",
                            NormalizedUserName = "USER_11_A323",
                            PasswordHash = "Zm7J9EwAAfKZl4iaser0rnnKASCjGMKmgFU13q3oPWmeofrHHWKls9aYl7Hjydkd",
                            PhoneNumber = "+1234567811",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_11_a323@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_11_a323"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_12_1cca@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_12_1cca@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 12",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_12_1CCA@EXAMPLE.COM",
                            NormalizedUserName = "USER_12_1CCA",
                            PasswordHash = "8UKi7T0qomUk3cTh7Bd3AXayybi1oIOIiFvrSpIWGi1PCORQ6951097zY3H8OjE3",
                            PhoneNumber = "+1234567812",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_12_1cca@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_12_1cca"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_13_9550@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_13_9550@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 13",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_13_9550@EXAMPLE.COM",
                            NormalizedUserName = "USER_13_9550",
                            PasswordHash = "0JLidWIAxOpm1sbySb8DdXFi6pQ2AaObdKtMlj5ZIgPh1SkN2JN7ad7WHf20XA2g",
                            PhoneNumber = "+1234567813",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_13_9550@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_13_9550"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_14_ada4@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_14_ada4@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 14",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_14_ADA4@EXAMPLE.COM",
                            NormalizedUserName = "USER_14_ADA4",
                            PasswordHash = "QbNBSZNZxipwiFF16o38U5Szz38PXjK5cQ0Onf3LW9W+DS8o7jkw4bJzZ/dSHPGV",
                            PhoneNumber = "+1234567814",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_14_ada4@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_14_ada4"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_15_e392@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_15_e392@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 15",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_15_E392@EXAMPLE.COM",
                            NormalizedUserName = "USER_15_E392",
                            PasswordHash = "HoTe9Bp0N17aW0UggU2jyeXeNtWcsO4RKX9U1D3acSy4uUb5QiFiM+Xx2NtRWFqn",
                            PhoneNumber = "+1234567815",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_15_e392@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_15_e392"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_16_c0f1@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_16_c0f1@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 16",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_16_C0F1@EXAMPLE.COM",
                            NormalizedUserName = "USER_16_C0F1",
                            PasswordHash = "7h2fA3HwJoUAUwQSD0gCH9NSfthsPHksN6UeHoUjU/B4NnieZBXbZ5FwBOzo9WN2",
                            PhoneNumber = "+1234567816",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_16_c0f1@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_16_c0f1"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_17_f7ee@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_17_f7ee@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 17",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_17_F7EE@EXAMPLE.COM",
                            NormalizedUserName = "USER_17_F7EE",
                            PasswordHash = "IZf6sqMg44yYTJAXUryV11/wFZsnk3rhqOwcH5Hzje3hGNk5rITAWkxNPPcN2/lt",
                            PhoneNumber = "+1234567817",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_17_f7ee@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_17_f7ee"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_18_47ef@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_18_47ef@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 18",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_18_47EF@EXAMPLE.COM",
                            NormalizedUserName = "USER_18_47EF",
                            PasswordHash = "IxXXbX4s/NrIiq3FRnaxfY8fQ60kJfF+Nmqrxi9h/V06UDklB4u0wnwVQUijAbCV",
                            PhoneNumber = "+1234567818",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_18_47ef@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_18_47ef"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_19_fc8c@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_19_fc8c@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 19",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_19_FC8C@EXAMPLE.COM",
                            NormalizedUserName = "USER_19_FC8C",
                            PasswordHash = "BuGvNxWu7pPZ2Tc/VPhYrPeiCfk++m60BQ22FJGoUeCgUQjBKpA889Zg2+wkx96c",
                            PhoneNumber = "+1234567819",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_19_fc8c@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_19_fc8c"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_20_674d@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_20_674d@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 20",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_20_674D@EXAMPLE.COM",
                            NormalizedUserName = "USER_20_674D",
                            PasswordHash = "7NO9I9CdUxSnZDKSckqyUrrKEmj8HRX7PVexWorT0CGNzUzqUgQezFdVHTjqCTfE",
                            PhoneNumber = "+1234567820",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_20_674d@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_20_674d"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_21_26f1@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_21_26f1@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 21",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_21_26F1@EXAMPLE.COM",
                            NormalizedUserName = "USER_21_26F1",
                            PasswordHash = "HuFHb1MamPfRV0roqMymYHO9ZYlGEvnvGTNy4Yb5+DTWPWnnoddNAEclgwWNJFF+",
                            PhoneNumber = "+1234567821",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_21_26f1@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_21_26f1"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fca"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_22_16b7@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_22_16b7@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 22",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_22_16B7@EXAMPLE.COM",
                            NormalizedUserName = "USER_22_16B7",
                            PasswordHash = "3Ca+/oq+QbkUasmIkRsBH8PVGpU1M4yhwSyC9s56Mht6Dqbz3Q7XH8JDHybeEmui",
                            PhoneNumber = "+1234567822",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_22_16b7@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_22_16b7"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fcb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_23_492b@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_23_492b@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 23",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_23_492B@EXAMPLE.COM",
                            NormalizedUserName = "USER_23_492B",
                            PasswordHash = "1PkehuoeChoP6KIaEXc1fcHZvMYiuhbFdKnU/40On2Pq6un1Nn5CAfG2qZ6ChV79",
                            PhoneNumber = "+1234567823",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_23_492b@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_23_492b"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fcc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_24_2f5b@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_24_2f5b@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 24",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_24_2F5B@EXAMPLE.COM",
                            NormalizedUserName = "USER_24_2F5B",
                            PasswordHash = "u594fd4SmT9MpSm7Hee+gsIhK5sBxqhig8dK172vQGbILXJp9v2J20Nbnbi6uhlk",
                            PhoneNumber = "+1234567824",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_24_2f5b@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_24_2f5b"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fcd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_25_e7e2@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_25_e7e2@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 25",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_25_E7E2@EXAMPLE.COM",
                            NormalizedUserName = "USER_25_E7E2",
                            PasswordHash = "HryWrle/d2kYDhMWF0kl4EHvyCTzL2qz7GM88kUWQfbCXHlBOH3xnnnS6N5J5D85",
                            PhoneNumber = "+1234567825",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_25_e7e2@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_25_e7e2"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fce"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_26_694d@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_26_694d@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 26",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_26_694D@EXAMPLE.COM",
                            NormalizedUserName = "USER_26_694D",
                            PasswordHash = "/DasPkFGum0A13kTzf7PVRhN6wFPjYX82xsiNtgUddSjpdVykgY9Rot0KrchJKy0",
                            PhoneNumber = "+1234567826",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_26_694d@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_26_694d"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fcf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_27_9e1f@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_27_9e1f@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 27",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_27_9E1F@EXAMPLE.COM",
                            NormalizedUserName = "USER_27_9E1F",
                            PasswordHash = "i5+x2/kkPPRM6rFxmpg2o0F4ZG36LsLxlnbDQ+gmceDmefU4uzSEcKhfaTJhYNV9",
                            PhoneNumber = "+1234567827",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_27_9e1f@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_27_9e1f"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_28_4b39@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_28_4b39@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 28",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_28_4B39@EXAMPLE.COM",
                            NormalizedUserName = "USER_28_4B39",
                            PasswordHash = "O6dJc6mlc0faPlhmkv0JQ6xYFieihtPgRsgpN5Va8M/JQlWWYcBRtwLCqCLH/xIL",
                            PhoneNumber = "+1234567828",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_28_4b39@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_28_4b39"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_29_9ccc@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_29_9ccc@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 29",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_29_9CCC@EXAMPLE.COM",
                            NormalizedUserName = "USER_29_9CCC",
                            PasswordHash = "90HViSH4rLKB/zj6tZP/2ZafqRSlM2KKFsh1+mKRHfRudE99pkdjj4tBnf8BrMce",
                            PhoneNumber = "+1234567829",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_29_9ccc@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_29_9ccc"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_30_72e7@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_30_72e7@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 30",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_30_72E7@EXAMPLE.COM",
                            NormalizedUserName = "USER_30_72E7",
                            PasswordHash = "uo69/TmamtS7JBOJL79+TF1icOHGan3WtpfKUBdQ+L52HccB+EfXeURqEDCUDPCt",
                            PhoneNumber = "+1234567830",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_30_72e7@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_30_72e7"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_31_9ab6@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_31_9ab6@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 31",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_31_9AB6@EXAMPLE.COM",
                            NormalizedUserName = "USER_31_9AB6",
                            PasswordHash = "1vjIcXQGxh7e7F0iUrJlDIsO7YSwZtKzwqWE2yffgPD5sWodXSOU0hGEIMo6gf63",
                            PhoneNumber = "+1234567831",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_31_9ab6@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_31_9ab6"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_32_9d8d@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_32_9d8d@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 32",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_32_9D8D@EXAMPLE.COM",
                            NormalizedUserName = "USER_32_9D8D",
                            PasswordHash = "ur/b/nrlx2q8qpiwcfrIzHfZKj93Cq1KfP01LM5Xhpp9E3r+2D87DWouZA4ZItnR",
                            PhoneNumber = "+1234567832",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_32_9d8d@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_32_9d8d"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_33_5f3d@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_33_5f3d@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 33",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_33_5F3D@EXAMPLE.COM",
                            NormalizedUserName = "USER_33_5F3D",
                            PasswordHash = "vahLyOLj/cDUr5UXnFUy1A6D6JC1eCQKWf0DRcg5b/5YeQQoNaq86i61K4bCmqE4",
                            PhoneNumber = "+1234567833",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_33_5f3d@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_33_5f3d"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_34_fbe5@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_34_fbe5@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 34",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_34_FBE5@EXAMPLE.COM",
                            NormalizedUserName = "USER_34_FBE5",
                            PasswordHash = "5mVplbKkbj2LppTNt7qEYk/qgX6f373amzkR3+ayR3fYeXfGST4Im7RjKD/GJKEE",
                            PhoneNumber = "+1234567834",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_34_fbe5@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_34_fbe5"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_35_76a5@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_35_76a5@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 35",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_35_76A5@EXAMPLE.COM",
                            NormalizedUserName = "USER_35_76A5",
                            PasswordHash = "uXyc38Ppl9kggBp2o7g2tMKPBj0l4Ex1ZFfsN/XNZzFqNzIfzkKd6K/iAprKY2AZ",
                            PhoneNumber = "+1234567835",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_35_76a5@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_35_76a5"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_36_5a02@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_36_5a02@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 36",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_36_5A02@EXAMPLE.COM",
                            NormalizedUserName = "USER_36_5A02",
                            PasswordHash = "ZAsAEL1Le1jGeqHxtbDdtuNwy8TvzHUYSEgSZi9CBbkQGHGLldi6KGRKQlKPv30i",
                            PhoneNumber = "+1234567836",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_36_5a02@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_36_5a02"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_37_2297@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_37_2297@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 37",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_37_2297@EXAMPLE.COM",
                            NormalizedUserName = "USER_37_2297",
                            PasswordHash = "IrLPlB+RaXTWRzUO21EDWGHbhG3JncPDa/TEDlK8YZ7vw5adBUEb1e644Ya3X1At",
                            PhoneNumber = "+1234567837",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_37_2297@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_37_2297"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fda"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_38_838c@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_38_838c@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 38",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_38_838C@EXAMPLE.COM",
                            NormalizedUserName = "USER_38_838C",
                            PasswordHash = "bTftvAC6K29pXuO1haXl3WHJkkeB2k1uJ37crYHdJOCAmMVNZklZJLMWMD/gs2MH",
                            PhoneNumber = "+1234567838",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_38_838c@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_38_838c"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fdb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_39_59be@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_39_59be@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 39",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_39_59BE@EXAMPLE.COM",
                            NormalizedUserName = "USER_39_59BE",
                            PasswordHash = "gHWnJMaqH3tVJ09a1Mo9cw0StkkrVppoi/UbzTV/3f9cC5LCAOmKJr3De0XaOxZu",
                            PhoneNumber = "+1234567839",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_39_59be@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_39_59be"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fdc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_40_664b@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_40_664b@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 40",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_40_664B@EXAMPLE.COM",
                            NormalizedUserName = "USER_40_664B",
                            PasswordHash = "kydfk0IBbIJIAaF3BmXk3nnXENxmyaZKtegZ9zsqLDfowOT0uC/9VYPndR+rxIgU",
                            PhoneNumber = "+1234567840",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_40_664b@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_40_664b"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fdd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_41_b975@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_41_b975@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 41",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_41_B975@EXAMPLE.COM",
                            NormalizedUserName = "USER_41_B975",
                            PasswordHash = "mBAIB2ZA4QdUGeNkmVpBMq0p3e5G/hec5AV3iw2HCBzEb7zD569gR7jmXvDuAJus",
                            PhoneNumber = "+1234567841",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_41_b975@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_41_b975"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fde"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_42_8b5d@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_42_8b5d@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 42",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_42_8B5D@EXAMPLE.COM",
                            NormalizedUserName = "USER_42_8B5D",
                            PasswordHash = "KyriBcZdntVoBt034x4BuR4TTVoNY/b1SbyRQtwgaXYp0oe0rbXayhJVJviterI7",
                            PhoneNumber = "+1234567842",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_42_8b5d@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_42_8b5d"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fdf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_43_f1e1@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_43_f1e1@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 43",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_43_F1E1@EXAMPLE.COM",
                            NormalizedUserName = "USER_43_F1E1",
                            PasswordHash = "NVt0XIGR0COPqNzyVxVH8f6AFs2nFyTU9JciGgSrkA4q253fVTNtks7dLynXZdzL",
                            PhoneNumber = "+1234567843",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_43_f1e1@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_43_f1e1"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_44_06fd@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_44_06fd@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 44",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_44_06FD@EXAMPLE.COM",
                            NormalizedUserName = "USER_44_06FD",
                            PasswordHash = "CUBKe6q3BXQFrK8XYdQXNlNbDmrioWb5Eo0889gzZTH8ilnoQMUTIJd6HNFqdgmD",
                            PhoneNumber = "+1234567844",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_44_06fd@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_44_06fd"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_45_f34c@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_45_f34c@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 45",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_45_F34C@EXAMPLE.COM",
                            NormalizedUserName = "USER_45_F34C",
                            PasswordHash = "OuFK29WcQjPCBfW830HEq93rl1BDewdN+UW+dHT0eL5ae8Lf1C0zLGj0p8xnfhjq",
                            PhoneNumber = "+1234567845",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_45_f34c@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_45_f34c"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_46_fda3@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_46_fda3@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 46",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_46_FDA3@EXAMPLE.COM",
                            NormalizedUserName = "USER_46_FDA3",
                            PasswordHash = "qY5JOM3j3ZTWv2Rra/zTBHk7mGFtdGwd7cDxTfiMCftbO1V+OavoXK1x37Ypxra2",
                            PhoneNumber = "+1234567846",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_46_fda3@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_46_fda3"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_47_a7c8@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_47_a7c8@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 47",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_47_A7C8@EXAMPLE.COM",
                            NormalizedUserName = "USER_47_A7C8",
                            PasswordHash = "BlfGz1Ut/KZiJsH+Dw2SI7pWt4X8/Y3JI/ucycrdTnqrjNy/MVDW4TKYFGrvexB4",
                            PhoneNumber = "+1234567847",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_47_a7c8@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_47_a7c8"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_48_8754@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1979, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_48_8754@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 48",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_48_8754@EXAMPLE.COM",
                            NormalizedUserName = "USER_48_8754",
                            PasswordHash = "kiKaOyNN22t/P/M5RuugYM3yV8LDOYE5A6B4LKqPm6XKjGEBTRjsaToNKb5PyqYz",
                            PhoneNumber = "+1234567848",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_48_8754@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_48_8754"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_49_7265@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1979, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_49_7265@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 49",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_49_7265@EXAMPLE.COM",
                            NormalizedUserName = "USER_49_7265",
                            PasswordHash = "Ut7FXrJ7ZBw2OkdlYrhP9sR9LTmIn5eZ8V/atoBpa7R9ukehLQZfAQDTX0+XFIxE",
                            PhoneNumber = "+1234567849",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_49_7265@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_49_7265"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_50_c254@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1979, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_50_c254@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 50",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_50_C254@EXAMPLE.COM",
                            NormalizedUserName = "USER_50_C254",
                            PasswordHash = "sKbalvCN3T2odhuPBbeXJ4BG79xczYo0R+wVw35i6cuHU4jj/vSBPcz41MUwgy04",
                            PhoneNumber = "+1234567850",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_50_c254@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_50_c254"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserAccessibilityPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccessibilityPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "AccessibilityPreferenceId");

                    b.HasIndex("AccessibilityPreferenceId");

                    b.ToTable("UserAccessibilityPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserGeographicalPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GeographicalPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "GeographicalPreferenceId");

                    b.HasIndex("GeographicalPreferenceId");

                    b.ToTable("UserGeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserLanguagePreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LanguagePreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "LanguagePreferenceId");

                    b.HasIndex("LanguagePreferenceId");

                    b.ToTable("UserLanguagePreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserMiscellaneousPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MiscellaneousPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "MiscellaneousPreferenceId");

                    b.HasIndex("MiscellaneousPreferenceId");

                    b.ToTable("UserMiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserNotificationPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("NotificationPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "NotificationPreferenceId");

                    b.HasIndex("NotificationPreferenceId");

                    b.ToTable("UserNotificationPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserPrivacyPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PrivacyPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "PrivacyPreferenceId");

                    b.HasIndex("PrivacyPreferenceId");

                    b.ToTable("UserPrivacyPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserThemePreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ThemePreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "ThemePreferenceId");

                    b.HasIndex("ThemePreferenceId");

                    b.ToTable("UserThemePreferences");
                });

            modelBuilder.Entity("AttachmentPost", b =>
                {
                    b.Property<Guid>("AttachmentsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("char(36)");

                    b.HasKey("AttachmentsId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("AttachmentPost");
                });

            modelBuilder.Entity("CategoryPost", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("char(36)");

                    b.HasKey("CategoriesId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("CategoryPost");
                });

            modelBuilder.Entity("CommentPost", b =>
                {
                    b.Property<Guid>("CommentsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("char(36)");

                    b.HasKey("CommentsId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("CommentPost");
                });

            modelBuilder.Entity("LinkPost", b =>
                {
                    b.Property<Guid>("LinksId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("char(36)");

                    b.HasKey("LinksId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("LinkPost");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Property<Guid>("PostsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("char(36)");

                    b.HasKey("PostsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("SitemapItemTopic", b =>
                {
                    b.Property<Guid>("SitemapItemId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TopicsId")
                        .HasColumnType("char(36)");

                    b.HasKey("SitemapItemId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("SitemapItemTopic");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.GeographicalPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Country", "Country")
                        .WithMany("GeographicalPreferences")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.DateFormat", "DateFormat")
                        .WithMany("GeographicalPreferences")
                        .HasForeignKey("DateFormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.TimeZone", "TimeZone")
                        .WithMany("GeographicalPreferences")
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Currency");

                    b.Navigation("DateFormat");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFile", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.User", null)
                        .WithMany("AuthoredMarkdownFiles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "ParentMdFile")
                        .WithMany()
                        .HasForeignKey("ParentMdFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ASafariM.Domain.Entities.Project", "Project")
                        .WithMany("MarkdownFiles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParentMdFile");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileHistory", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "MarkdownFile")
                        .WithMany("History")
                        .HasForeignKey("MarkdownFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarkdownFile");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileUser", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "MarkdownFile")
                        .WithMany("MarkdownFileUsers")
                        .HasForeignKey("MarkdownFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany("MarkdownFileUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarkdownFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MiscellaneousPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.FileFormat", "FileFormat")
                        .WithMany("MiscellaneousPreferences")
                        .HasForeignKey("FileFormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.PaginationSettings", "PaginationSettings")
                        .WithMany("MiscellaneousPreferences")
                        .HasForeignKey("PaginationSettingsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FileFormat");

                    b.Navigation("PaginationSettings");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Post", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("RelatedPosts")
                        .HasForeignKey("PostId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostAttachment", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("PostAttachments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostCategory", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("PostCategories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostCollaborator", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.User", "Collaborator")
                        .WithMany()
                        .HasForeignKey("CollaboratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("PostCollaborators")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collaborator");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostComment", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.User", "Commenter")
                        .WithMany()
                        .HasForeignKey("CommenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commenter");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostLink", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("PostLinks")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Link");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelatedPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", "RelatedPost")
                        .WithMany("PostRelatedPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedPost");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostTag", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProgressHistory", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Project", "Project")
                        .WithOne("Progress")
                        .HasForeignKey("ASafariM.Domain.Entities.ProgressHistory", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Project", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", null)
                        .WithMany("Projects")
                        .HasForeignKey("MarkdownFileId");

                    b.HasOne("ASafariM.Domain.Entities.User", "Owner")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", null)
                        .WithMany("ManagedProjects")
                        .HasForeignKey("UserId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProjectMember", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany("ProjectMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.SitemapItem", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.SitemapItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASafariM.Domain.Entities.SitemapItem", null)
                        .WithMany("ChildItems")
                        .HasForeignKey("SitemapItemId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ThemePreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.LanguagePreference", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Topic", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Topic", "ParentTopic")
                        .WithMany("ChildTopics")
                        .HasForeignKey("ParentTopicId");

                    b.Navigation("ParentTopic");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.User", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("Collaborators")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserAccessibilityPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.AccessibilityPreference", "AccessibilityPreference")
                        .WithMany()
                        .HasForeignKey("AccessibilityPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessibilityPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserGeographicalPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.GeographicalPreference", "GeographicalPreference")
                        .WithMany()
                        .HasForeignKey("GeographicalPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeographicalPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserLanguagePreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.LanguagePreference", "LanguagePreference")
                        .WithMany()
                        .HasForeignKey("LanguagePreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguagePreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserMiscellaneousPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MiscellaneousPreference", "MiscellaneousPreference")
                        .WithMany()
                        .HasForeignKey("MiscellaneousPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MiscellaneousPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserNotificationPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.NotificationPreference", "NotificationPreference")
                        .WithMany()
                        .HasForeignKey("NotificationPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserPrivacyPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.PrivacyPreference", "PrivacyPreference")
                        .WithMany()
                        .HasForeignKey("PrivacyPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivacyPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserThemePreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.ThemePreference", "ThemePreference")
                        .WithMany()
                        .HasForeignKey("ThemePreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ThemePreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AttachmentPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommentPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Comment", null)
                        .WithMany()
                        .HasForeignKey("CommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LinkPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Link", null)
                        .WithMany()
                        .HasForeignKey("LinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SitemapItemTopic", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.SitemapItem", null)
                        .WithMany()
                        .HasForeignKey("SitemapItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Country", b =>
                {
                    b.Navigation("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.DateFormat", b =>
                {
                    b.Navigation("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.FileFormat", b =>
                {
                    b.Navigation("MiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFile", b =>
                {
                    b.Navigation("History");

                    b.Navigation("MarkdownFileUsers");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PaginationSettings", b =>
                {
                    b.Navigation("MiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Post", b =>
                {
                    b.Navigation("Collaborators");

                    b.Navigation("PostAttachments");

                    b.Navigation("PostCategories");

                    b.Navigation("PostCollaborators");

                    b.Navigation("PostComments");

                    b.Navigation("PostLinks");

                    b.Navigation("PostRelatedPosts");

                    b.Navigation("PostTags");

                    b.Navigation("RelatedPosts");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Project", b =>
                {
                    b.Navigation("MarkdownFiles");

                    b.Navigation("Progress");

                    b.Navigation("ProjectMembers");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.SitemapItem", b =>
                {
                    b.Navigation("ChildItems");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.TimeZone", b =>
                {
                    b.Navigation("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Topic", b =>
                {
                    b.Navigation("ChildTopics");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.User", b =>
                {
                    b.Navigation("AuthoredMarkdownFiles");

                    b.Navigation("ManagedProjects");

                    b.Navigation("MarkdownFileUsers");

                    b.Navigation("OwnedProjects");

                    b.Navigation("Posts");

                    b.Navigation("ProjectMemberships");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
