// <auto-generated />
using System;
using ASafariM.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASafariM.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250401160532_AddPortfoliosTable")]
    partial class AddPortfoliosTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ASafariM.Domain.Entities.AccessibilityPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("EnableHighContrastMode")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableScreenReaderSupport")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TextScalingFactor")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AccessibilityPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Assignee")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Size")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.BibliographyItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AttachmentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.ToTable("BibliographyItems", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("61c5d8f0-e3f5-4e7a-9cbb-6b178b2f5e7a"),
                            Author = "Robert C. Martin",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 798, DateTimeKind.Utc).AddTicks(5368),
                            CreatedBy = "System",
                            Genre = "Software Development",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = true,
                            Title = "Clean Code: A Handbook of Agile Software Craftsmanship",
                            Year = 2008
                        },
                        new
                        {
                            Id = new Guid("71c5d8f0-e3f5-4e7a-9cbb-6b178b2f5e7a"),
                            Author = "Andrew Hunt, David Thomas",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 798, DateTimeKind.Utc).AddTicks(7452),
                            CreatedBy = "System",
                            Genre = "Software Development",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = true,
                            Title = "The Pragmatic Programmer",
                            Year = 1999
                        },
                        new
                        {
                            Id = new Guid("81c5d8f0-e3f5-4e7a-9cbb-6b178b2f5e7a"),
                            Author = "Erich Gamma, Richard Helm, Ralph Johnson, John Vlissides",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 798, DateTimeKind.Utc).AddTicks(7461),
                            CreatedBy = "System",
                            Genre = "Object-Oriented Programming",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = true,
                            Title = "Design Patterns: Elements of Reusable Object-Oriented Software",
                            Year = 1994
                        },
                        new
                        {
                            Id = new Guid("91c5d8f0-e3f5-4e7a-9cbb-6b178b2f5e7a"),
                            Author = "Jon Skeet",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 798, DateTimeKind.Utc).AddTicks(7484),
                            CreatedBy = "System",
                            Genre = ".NET",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Title = "C# in Depth",
                            Year = 2019
                        },
                        new
                        {
                            Id = new Guid("a1c5d8f0-e3f5-4e7a-9cbb-6b178b2f5e7a"),
                            Author = "Andrew Lock",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 798, DateTimeKind.Utc).AddTicks(7492),
                            CreatedBy = "System",
                            Genre = ".NET",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Title = "ASP.NET Core in Action",
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("b1c5d8f0-e3f5-4e7a-9cbb-6b178b2f5e7a"),
                            Author = "Eric Evans",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 798, DateTimeKind.Utc).AddTicks(7500),
                            CreatedBy = "System",
                            Genre = "Software Architecture",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = true,
                            Title = "Domain-Driven Design: Tackling Complexity in the Heart of Software",
                            Year = 2003
                        },
                        new
                        {
                            Id = new Guid("c1c5d8f0-e3f5-4e7a-9cbb-6b178b2f5e7a"),
                            Author = "Martin Fowler",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 798, DateTimeKind.Utc).AddTicks(7517),
                            CreatedBy = "System",
                            Genre = "Software Development",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Title = "Refactoring: Improving the Design of Existing Code",
                            Year = 2018
                        },
                        new
                        {
                            Id = new Guid("d1c5d8f0-e3f5-4e7a-9cbb-6b178b2f5e7a"),
                            Author = "Jon P Smith",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 798, DateTimeKind.Utc).AddTicks(7531),
                            CreatedBy = "System",
                            Genre = ".NET",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = true,
                            Title = "Entity Framework Core in Action",
                            Year = 2018
                        },
                        new
                        {
                            Id = new Guid("e1c5d8f0-e3f5-4e7a-9cbb-6b178b2f5e7a"),
                            Author = "Robert C. Martin",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 798, DateTimeKind.Utc).AddTicks(7541),
                            CreatedBy = "System",
                            Genre = "Software Architecture",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = true,
                            Title = "Clean Architecture: A Craftsman's Guide to Software Structure and Design",
                            Year = 2017
                        },
                        new
                        {
                            Id = new Guid("f1c5d8f0-e3f5-4e7a-9cbb-6b178b2f5e7a"),
                            Author = "Martin Fowler",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 798, DateTimeKind.Utc).AddTicks(7554),
                            CreatedBy = "System",
                            Genre = "Software Architecture",
                            IsActive = true,
                            IsDeleted = false,
                            IsRead = false,
                            Title = "Patterns of Enterprise Application Architecture",
                            Year = 2002
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Capital")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("IsoCode3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IsoCode")
                        .IsUnique();

                    b.HasIndex("IsoCode3")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21e4e312-f5f8-4fd0-a741-5ae68deec96e"),
                            Capital = "Brussels",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "BE",
                            IsoCode3 = "BEL",
                            Name = "Belgium",
                            NativeName = "België",
                            PhoneCode = "+32"
                        },
                        new
                        {
                            Id = new Guid("9a65046f-5f7c-4c5d-a010-99dac6d6fb3f"),
                            Capital = "Paris",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "FR",
                            IsoCode3 = "FRA",
                            Name = "France",
                            NativeName = "France",
                            PhoneCode = "+33"
                        },
                        new
                        {
                            Id = new Guid("c5497f55-053e-4a40-b2ea-7e9000fdc395"),
                            Capital = "Berlin",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "DE",
                            IsoCode3 = "DEU",
                            Name = "Germany",
                            NativeName = "Deutschland",
                            PhoneCode = "+49"
                        },
                        new
                        {
                            Id = new Guid("109fad37-2acb-405b-aea0-c29f78f87ff6"),
                            Capital = "Amsterdam",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "NL",
                            IsoCode3 = "NLD",
                            Name = "Netherlands",
                            NativeName = "Nederland",
                            PhoneCode = "+31"
                        },
                        new
                        {
                            Id = new Guid("b7f15f04-5fc6-4082-9056-2b2092022f4e"),
                            Capital = "London",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "GB",
                            IsoCode3 = "GBR",
                            Name = "United Kingdom",
                            NativeName = "United Kingdom",
                            PhoneCode = "+44"
                        },
                        new
                        {
                            Id = new Guid("cec2f4df-1527-42f3-89ec-645799fc8000"),
                            Capital = "Rome",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "IT",
                            IsoCode3 = "ITA",
                            Name = "Italy",
                            NativeName = "Italia",
                            PhoneCode = "+39"
                        },
                        new
                        {
                            Id = new Guid("7ced98c7-412a-49d7-b99a-9bc6b762dd08"),
                            Capital = "Madrid",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "ES",
                            IsoCode3 = "ESP",
                            Name = "Spain",
                            NativeName = "España",
                            PhoneCode = "+34"
                        },
                        new
                        {
                            Id = new Guid("a2d99c11-f214-47fa-9e80-beac0d41801a"),
                            Capital = "Bern",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "CH",
                            IsoCode3 = "CHE",
                            Name = "Switzerland",
                            NativeName = "Schweiz",
                            PhoneCode = "+41"
                        },
                        new
                        {
                            Id = new Guid("3a21f453-68ca-4034-852f-bb78345ecfba"),
                            Capital = "Vienna",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "AT",
                            IsoCode3 = "AUT",
                            Name = "Austria",
                            NativeName = "Österreich",
                            PhoneCode = "+43"
                        },
                        new
                        {
                            Id = new Guid("fc1a87f1-99b7-4a34-966c-f33c27bffbee"),
                            Capital = "Luxembourg",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "LU",
                            IsoCode3 = "LUX",
                            Name = "Luxembourg",
                            NativeName = "Luxembourg",
                            PhoneCode = "+352"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DecimalPlaces")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b80920c1-15a4-4d3b-8450-5c314546f6c8"),
                            Code = "EUR",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 794, DateTimeKind.Utc).AddTicks(2321),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "Euro",
                            Symbol = "€"
                        },
                        new
                        {
                            Id = new Guid("f03fd365-388d-42ac-b6c0-b83fe5ece1bb"),
                            Code = "USD",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 794, DateTimeKind.Utc).AddTicks(6832),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "US Dollar",
                            Symbol = "$"
                        },
                        new
                        {
                            Id = new Guid("177a9999-f3ac-4b10-9ff4-49cd1bf3211c"),
                            Code = "GBP",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 794, DateTimeKind.Utc).AddTicks(6936),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "British Pound",
                            Symbol = "£"
                        },
                        new
                        {
                            Id = new Guid("00952b7a-2e63-4f27-b41e-cc050f33679c"),
                            Code = "CHF",
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 794, DateTimeKind.Utc).AddTicks(6947),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "Swiss Franc",
                            Symbol = "Fr."
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.DateFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Example")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Format")
                        .IsUnique();

                    b.ToTable("DateFormats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a194c629-dd6c-4c93-b7af-c41d7f65f562"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 793, DateTimeKind.Utc).AddTicks(7557),
                            CreatedBy = "System",
                            DisplayName = "Belgian/European Date Format",
                            Example = "31/12/2024",
                            Format = "dd/MM/yyyy",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("2cfdadaa-e697-492b-a546-6412a82b5d1c"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 794, DateTimeKind.Utc).AddTicks(408),
                            CreatedBy = "System",
                            DisplayName = "Belgian Date Format (Dot)",
                            Example = "31.12.2024",
                            Format = "dd.MM.yyyy",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("983b576e-6935-4d42-9a9a-09de0d3a197e"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 794, DateTimeKind.Utc).AddTicks(415),
                            CreatedBy = "System",
                            DisplayName = "US Date Format",
                            Example = "12/31/2024",
                            Format = "MM/dd/yyyy",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("218574f2-4981-4aad-af41-94645297ea5e"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 794, DateTimeKind.Utc).AddTicks(436),
                            CreatedBy = "System",
                            DisplayName = "ISO Date Format",
                            Example = "2024-12-31",
                            Format = "yyyy-MM-dd",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.FileFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxSizeInMB")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("SupportsAnnotations")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SupportsEditing")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Extension")
                        .IsUnique();

                    b.HasIndex("MimeType")
                        .IsUnique();

                    b.ToTable("FileFormats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7099462e-9e6f-4eb3-ad33-ade03a10b912"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 792, DateTimeKind.Utc).AddTicks(8181),
                            CreatedBy = "System",
                            Description = "Simple text document format",
                            Extension = ".txt",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            MaxSizeInMB = 10,
                            MimeType = "text/plain",
                            Name = "Plain Text",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("63fd0ead-3f90-4aa5-92c2-e6075a2cc91c"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 793, DateTimeKind.Utc).AddTicks(932),
                            CreatedBy = "System",
                            Description = "TypeScript source code file",
                            Extension = ".ts",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/typescript",
                            Name = "TypeScript",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("5c7f476d-9650-4951-a930-b9bd8d5cea34"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 793, DateTimeKind.Utc).AddTicks(950),
                            CreatedBy = "System",
                            Description = "TypeScript React component file",
                            Extension = ".tsx",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/typescript+react",
                            Name = "TypeScript React",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("5eaa0e01-1cd2-4ae1-91ac-edebbbc10719"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 793, DateTimeKind.Utc).AddTicks(954),
                            CreatedBy = "System",
                            Description = "JavaScript source code file",
                            Extension = ".js",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/javascript",
                            Name = "JavaScript",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("72e49c06-df15-41e9-875e-0565ae278a84"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 793, DateTimeKind.Utc).AddTicks(1064),
                            CreatedBy = "System",
                            Description = "JavaScript Object Notation data file",
                            Extension = ".json",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/json",
                            Name = "JSON",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("47f6b5e6-78ac-445f-b960-322d87a241e4"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 793, DateTimeKind.Utc).AddTicks(1068),
                            CreatedBy = "System",
                            Description = "Markdown text format",
                            Extension = ".md",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            MaxSizeInMB = 10,
                            MimeType = "text/markdown",
                            Name = "Markdown",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.GeographicalPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DateFormatId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TimeZoneId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DateFormatId");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Initiative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.PrimitiveCollection<string>("GoalItems")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.PrimitiveCollection<string>("TeamMembers")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Initiatives");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.LanguagePreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("LanguagePreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Links", (string)null);
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AuthorName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ParentMdFileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParentMdFileId");

                    b.HasIndex("ProjectId");

                    b.ToTable("MarkdownFiles");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ChangedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ContentSnapshot")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MarkdownFileId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MarkdownFileId");

                    b.ToTable("MarkdownFileHistories");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileUser", b =>
                {
                    b.Property<Guid>("MarkdownFileId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("CollaborationRole")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CollaborationStopDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateCollaborated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MarkdownFileId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MarkdownFileUsers");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MiscellaneousPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DefaultDashboardView")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EnableAutoSave")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableRealTimeUpdates")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("FileFormatId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PaginationSettingsId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("ShowActivityTimeline")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FileFormatId");

                    b.HasIndex("PaginationSettingsId");

                    b.ToTable("MiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.NotificationPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AllowMarketingEmails")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsSubscribedToNewsletter")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NotificationFrequencyInHours")
                        .HasColumnType("int");

                    b.Property<bool>("ReceiveEmailNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ReceiveSmsNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("NotificationPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PaginationSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("EnableInfiniteScroll")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ItemsPerPage")
                        .HasColumnType("int");

                    b.Property<string>("PageSizeOptions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("ShowFirstLastButtons")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowItemsCount")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowPageNumbers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowPageSizeSelector")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VisiblePageRange")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaginationSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f07c8a09-77b1-4742-a8ba-e62e52b46011"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 793, DateTimeKind.Utc).AddTicks(2957),
                            EnableInfiniteScroll = false,
                            IsActive = true,
                            IsDefault = false,
                            ItemsPerPage = 10,
                            PageSizeOptions = "[10,20,50,100]",
                            ShowFirstLastButtons = true,
                            ShowItemsCount = true,
                            ShowPageNumbers = true,
                            ShowPageSizeSelector = true,
                            VisiblePageRange = 5
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Portfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AboutMarkdown")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("ExperienceMarkdown")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FundingMarkdown")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<string>("PublicationsMarkdown")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("Visibility")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.PrimitiveCollection<string>("AudioUrls")
                        .HasColumnType("longtext");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Excerpt")
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("ImageUrls")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Slug")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusColor")
                        .HasColumnType("longtext");

                    b.Property<string>("StatusIcon")
                        .HasColumnType("longtext");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("StatusTooltip")
                        .HasColumnType("longtext");

                    b.Property<string>("Summary")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("VideoUrls")
                        .HasColumnType("longtext");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("AttachedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("PostId");

                    b.ToTable("PostAttachment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PostId");

                    b.ToTable("PostCategory");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostCollaborator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CollaboratorId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CollaboratorId");

                    b.HasIndex("PostId");

                    b.ToTable("PostCollaborator");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CommentedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("PostComment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LinkId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("LinkedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.HasIndex("PostId");

                    b.ToTable("PostLink");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostRelatedPost", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RelatedPostId")
                        .HasColumnType("char(36)");

                    b.HasKey("PostId", "RelatedPostId");

                    b.HasIndex("RelatedPostId");

                    b.ToTable("PostRelatedPost");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostTag", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostTopic", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("PostId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("PostTopic");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PrivacyPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AllowDataSharing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowSearchByEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<bool>("EnableTwoFactorAuthentication")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsProfilePublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PrivacyPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProgressHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double?>("ActualCost")
                        .HasColumnType("double");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("BudgetVariance")
                        .HasColumnType("double");

                    b.Property<int>("CompletedMilestones")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MitigationPlan")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<double?>("PlannedBudget")
                        .HasColumnType("double");

                    b.Property<DateTime?>("PlannedEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PlannedStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("RiskDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RiskLevel")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatusReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("TimeVarianceInDays")
                        .HasColumnType("int");

                    b.Property<int>("TotalMilestones")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.HasIndex("StatusReason")
                        .IsUnique();

                    b.ToTable("ProgressHistories");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double?>("ActualBudget")
                        .HasColumnType("double");

                    b.Property<double?>("Budget")
                        .HasColumnType("double");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CancelledBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CompletedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExtendedUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExtended")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("MarkdownFileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("PausedUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("RemainingBudget")
                        .HasColumnType("double");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MarkdownFileId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProjectMember", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ProjectId1")
                        .HasColumnType("char(36)");

                    b.Property<int>("ProjectMemberType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectId1");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ea15de58-cff6-481f-886a-fc9223ab9bdf"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 792, DateTimeKind.Utc).AddTicks(3587),
                            CreatedBy = "System",
                            Description = "Admin role has full administrative privileges, except for application management.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("7fefe91f-29b4-4ca6-8dde-f2765c29830b"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 792, DateTimeKind.Utc).AddTicks(5754),
                            CreatedBy = "System",
                            Description = "Manages user interactions and content moderation. They can create and manage their own tasks, projects, and content, and can edit other public articles than their own.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("ff9ce8bb-2ecc-40ea-8f31-124868b67b9e"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 792, DateTimeKind.Utc).AddTicks(5765),
                            CreatedBy = "System",
                            Description = "User role with limited privileges. A user can create and manage their own tasks, projects, and content, and cannot edit other public articles than their own.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("1b288cb6-6948-4cfc-8d15-78774f6f149a"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 792, DateTimeKind.Utc).AddTicks(5786),
                            CreatedBy = "System",
                            Description = "Guest role is the least privileged role. They can only view public articles.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Guest"
                        },
                        new
                        {
                            Id = new Guid("d7286970-b68b-47b7-868d-d0f2ec5b1b68"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 792, DateTimeKind.Utc).AddTicks(5791),
                            CreatedBy = "System",
                            Description = "Focuses on content creation and management without full administrative privileges. They can create and manage their own articles, but cannot edit other public articles than their own.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Editor"
                        },
                        new
                        {
                            Id = new Guid("b0d10fdc-5fa6-4f4f-924e-1df51bbdaf68"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 792, DateTimeKind.Utc).AddTicks(5797),
                            CreatedBy = "System",
                            Description = "Has full control over the application and can manage all aspects.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.SitemapItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessByRole")
                        .HasColumnType("int");

                    b.Property<string>("ArchivedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangeFrequency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExternalLink")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUnpublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParentItemId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Priority")
                        .HasColumnType("double");

                    b.Property<string>("PublishedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("SitemapItemId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UnpublishBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UnpublishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParentItemId");

                    b.HasIndex("SitemapItemId");

                    b.ToTable("SitemapItems");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4cbb9c30-397f-4dc6-a8bb-c91bd18f5af4"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 796, DateTimeKind.Utc).AddTicks(9272),
                            CreatedBy = "System",
                            Description = "Test Tag description",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Tag name",
                            Slug = "test-tag-slug"
                        },
                        new
                        {
                            Id = new Guid("5ef570e9-b9fd-49e6-a542-ab29ea5cf72b"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 797, DateTimeKind.Utc).AddTicks(1514),
                            CreatedBy = "System",
                            Description = "Test Tag description 2",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Tag name 2",
                            Slug = "test-tag-slug-2"
                        },
                        new
                        {
                            Id = new Guid("fd0c394b-4fbc-4330-ac37-50130d8d8843"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 797, DateTimeKind.Utc).AddTicks(1527),
                            CreatedBy = "System",
                            Description = "Test Tag description 3",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Tag name 3",
                            Slug = "test-tag-slug-3"
                        },
                        new
                        {
                            Id = new Guid("64a15ff6-5753-43e1-8ad3-78710fd6a9f3"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 797, DateTimeKind.Utc).AddTicks(1533),
                            CreatedBy = "System",
                            Description = "Test Tag description 4",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Tag name 4",
                            Slug = "test-tag-slug-4"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ThemePreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccentColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("DarkModeBackgroundColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DarkModePrimaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DarkModeTextColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FontSize")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDarkModeEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDarkTheme")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHighContrastModeEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReducedMotionEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LightModeBackgroundColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LightModePrimaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LightModeTextColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PrimaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SecondaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TertiaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("ThemePreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.TimeZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DstOffset")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("UsesDaylightSaving")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UtcOffset")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("StandardName")
                        .IsUnique();

                    b.ToTable("TimeZones");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8214769-c5c5-4b96-8d5e-2e28f53e67b2"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 794, DateTimeKind.Utc).AddTicks(9763),
                            DstOffset = "+02:00",
                            IsActive = true,
                            Name = "CET",
                            StandardName = "Central European Time (Belgium)",
                            UsesDaylightSaving = true,
                            UtcOffset = "+01:00"
                        },
                        new
                        {
                            Id = new Guid("6648f55d-5e1f-48d8-bae4-f068a52017f9"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 795, DateTimeKind.Utc).AddTicks(2680),
                            DstOffset = "+02:00",
                            IsActive = true,
                            Name = "CEST",
                            StandardName = "Central European Summer Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+02:00"
                        },
                        new
                        {
                            Id = new Guid("38768416-1754-4b77-bcee-578340316f06"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 795, DateTimeKind.Utc).AddTicks(2700),
                            DstOffset = "+02:00",
                            IsActive = true,
                            Name = "UTC",
                            StandardName = "Coordinated Universal Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+00:00"
                        },
                        new
                        {
                            Id = new Guid("930f8817-12f1-447f-a8da-fe6bb3cd156f"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 795, DateTimeKind.Utc).AddTicks(2719),
                            DstOffset = "+01:00",
                            IsActive = true,
                            Name = "WET",
                            StandardName = "Western European Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+00:00"
                        },
                        new
                        {
                            Id = new Guid("df933175-638f-4831-89ce-9564b2df3797"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 795, DateTimeKind.Utc).AddTicks(2723),
                            DstOffset = "+03:00",
                            IsActive = true,
                            Name = "EET",
                            StandardName = "Eastern European Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+02:00"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("ParentTopicId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParentTopicId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 797, DateTimeKind.Utc).AddTicks(7795),
                            CreatedBy = "System",
                            Description = "Test Topic description",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Topic name",
                            Slug = "test-topic-slug"
                        },
                        new
                        {
                            Id = new Guid("b9fe97ed-7a3b-4770-a9cb-c9e502bcaaab"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 798, DateTimeKind.Utc).AddTicks(969),
                            CreatedBy = "System",
                            Description = "Test Topic description 2",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Topic name 2",
                            ParentTopicId = new Guid("1fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Slug = "test-topic-slug-2"
                        },
                        new
                        {
                            Id = new Guid("f67be590-6d8e-4d1c-a389-1954a3a04af4"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 798, DateTimeKind.Utc).AddTicks(997),
                            CreatedBy = "System",
                            Description = "Test Topic description 3",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Topic name 3",
                            Slug = "test-topic-slug-3"
                        },
                        new
                        {
                            Id = new Guid("3d82ed20-fa3e-43ce-8cd7-82aab30f7594"),
                            CreatedAt = new DateTime(2025, 4, 1, 16, 5, 27, 798, DateTimeKind.Utc).AddTicks(1005),
                            CreatedBy = "System",
                            Description = "Test Topic description 4",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Topic name 4",
                            ParentTopicId = new Guid("1fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Slug = "test-topic-slug-4"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ForgotPasswordToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ForgotPasswordTokenExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBannedByAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEditor")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLoggedIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsModerator")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPending")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsStandardUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LinkUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PasswordResetToken")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PasswordResetTokenExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PenName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext");

                    b.Property<string>("ReactivationReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReactivationRequestedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("RefreshTokenExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Token")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .IsUnique();

                    b.HasIndex("NormalizedUserName")
                        .IsUnique();

                    b.HasIndex("PostId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "demo_admin@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "demo_admin@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "Demo Admin",
                            IsActive = true,
                            IsAdmin = true,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = true,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Account",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO_ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "DEMO_ADMIN",
                            PasswordHash = "/iaNYV8qRjwsy+shsob4Rixcz7Qy03uGNWCEcUtUqSA6N0LrdUR2mpKQHx+qSSYm",
                            PhoneNumber = "+123456789",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "demo_admin@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "demo_admin"
                        },
                        new
                        {
                            Id = new Guid("1048da39-cdaf-47a9-9fb1-960d81dd704b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "demo_user@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "demo_user@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "Demo User",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Account",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO_USER@EXAMPLE.COM",
                            NormalizedUserName = "DEMO_USER",
                            PasswordHash = "z1o14fDMFFAF5shoM0EneW8zvRjo7E8fOC3a9umNaeZ9oJIqQnvVEbkfxdtWD1Tn",
                            PhoneNumber = "+1234567890",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "demo_user@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "demo_user"
                        },
                        new
                        {
                            Id = new Guid("1448da39-cdaf-47a9-9fb1-960d81dd704b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "asafarim.it@gmail.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1990, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "asafarim.it@gmail.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "Deleted User",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Account",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASAFARIM.IT@GMAIL.COM",
                            NormalizedUserName = "DELETED_USER",
                            PasswordHash = "qut7PgRa+BNJs7QJAsuR0YLGhWl4bUbqhNk9EB5J4mSEoB9qim1CrGlQ2lEJ1Tgu",
                            PhoneNumber = "+1234567890",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "asafarim.it@gmail.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "deleted_user"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_1_45a5@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_1_45a5@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 1",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_1_45A5@EXAMPLE.COM",
                            NormalizedUserName = "USER_1_45A5",
                            PasswordHash = "94XEbRAO5sjM6+uSgN/aCTq/W8iIj/EejG8d6Gvcp1t/0nKcBzg8VoUhXm7mD3eX",
                            PhoneNumber = "+123456781",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_1_45a5@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_1_45a5"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_2_d8f6@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_2_d8f6@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 2",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_2_D8F6@EXAMPLE.COM",
                            NormalizedUserName = "USER_2_D8F6",
                            PasswordHash = "k3jKYRq1znktMF+PqY/6MMXtrxFblqxc2SSEUPvhCNSUXfLlysvt+2hVUL4nvMJ5",
                            PhoneNumber = "+123456782",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_2_d8f6@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_2_d8f6"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_3_c6aa@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_3_c6aa@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 3",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_3_C6AA@EXAMPLE.COM",
                            NormalizedUserName = "USER_3_C6AA",
                            PasswordHash = "z0sGY0QYLH9cF8LNkXEW6cq5b0XcIH6JKUrO1jEowgB+7Jvta2nIL7SLvSYk4a5r",
                            PhoneNumber = "+123456783",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_3_c6aa@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_3_c6aa"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_4_e0d8@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_4_e0d8@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 4",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_4_E0D8@EXAMPLE.COM",
                            NormalizedUserName = "USER_4_E0D8",
                            PasswordHash = "2R/vxa45LXGqo4b8vAoTKhdFPtRjUjyB0F+k3+PM4Q5w3F+8QisBY83aBMO9U5/s",
                            PhoneNumber = "+123456784",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_4_e0d8@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_4_e0d8"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_5_f0be@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_5_f0be@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 5",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_5_F0BE@EXAMPLE.COM",
                            NormalizedUserName = "USER_5_F0BE",
                            PasswordHash = "j/L64mz6OvC0SbuzWi1f0Q9oPZ5GsvAOOrusNkoTwqipFHveWR6z9LPjFasLvuub",
                            PhoneNumber = "+123456785",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_5_f0be@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_5_f0be"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fba"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_6_7fdb@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_6_7fdb@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 6",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_6_7FDB@EXAMPLE.COM",
                            NormalizedUserName = "USER_6_7FDB",
                            PasswordHash = "LmFMAznjfIs/DW3H97rVQEIZBrtGN+L+s0dKg6vm6z6VXyuTy78Sj7uRV94BGndX",
                            PhoneNumber = "+123456786",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_6_7fdb@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_6_7fdb"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_7_9a99@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_7_9a99@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 7",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_7_9A99@EXAMPLE.COM",
                            NormalizedUserName = "USER_7_9A99",
                            PasswordHash = "SNFb6UQKLcpliq0ebs/PH4vWhkA7enVjvFJkgP5GBq1uEIITNT4XZlOYWZFIfTF8",
                            PhoneNumber = "+123456787",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_7_9a99@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_7_9a99"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_8_5760@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_8_5760@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 8",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_8_5760@EXAMPLE.COM",
                            NormalizedUserName = "USER_8_5760",
                            PasswordHash = "TpwAonxJ8oYrSr0Mzl64N0eDppdwXn1L6yDVhMK4PhDUvVP73HWImYQVU11s9ARX",
                            PhoneNumber = "+123456788",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_8_5760@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_8_5760"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_9_e5cf@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_9_e5cf@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 9",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_9_E5CF@EXAMPLE.COM",
                            NormalizedUserName = "USER_9_E5CF",
                            PasswordHash = "/ofDOL3NLHZQcmN3t0xvAmBiyeoRV5mdf14jb6oVXLo+oAFwGxlaRJhyyVVkufFP",
                            PhoneNumber = "+123456789",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_9_e5cf@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_9_e5cf"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbe"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_10_d224@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_10_d224@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 10",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_10_D224@EXAMPLE.COM",
                            NormalizedUserName = "USER_10_D224",
                            PasswordHash = "yPlCGO0DIGZErckh9FJrLjZzHnqb+I0S4r09AlcQNDDCRRVGo2w4djiqZEReSGAN",
                            PhoneNumber = "+1234567810",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_10_d224@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_10_d224"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_11_c69d@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_11_c69d@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 11",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_11_C69D@EXAMPLE.COM",
                            NormalizedUserName = "USER_11_C69D",
                            PasswordHash = "0mCa/qlV1vemzBAp3JSyxLJNm1gDc7BzMBMWQXyOSFykXwEFkRvduk8/48W70kpF",
                            PhoneNumber = "+1234567811",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_11_c69d@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_11_c69d"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_12_d0d3@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_12_d0d3@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 12",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_12_D0D3@EXAMPLE.COM",
                            NormalizedUserName = "USER_12_D0D3",
                            PasswordHash = "JFrsoh3KreW313ihR0bomQV/nltPBx4eyEZ710iaH/C++CgMWpvGznKPaTHjc2pc",
                            PhoneNumber = "+1234567812",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_12_d0d3@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_12_d0d3"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_13_56b2@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_13_56b2@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 13",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_13_56B2@EXAMPLE.COM",
                            NormalizedUserName = "USER_13_56B2",
                            PasswordHash = "Yc4woH94ICN5p8gJ4h9dm9B6FSNNCASkoY0RYe90jVj79uS/3Z55kiEpfGtwFBUg",
                            PhoneNumber = "+1234567813",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_13_56b2@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_13_56b2"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_14_f552@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_14_f552@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 14",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_14_F552@EXAMPLE.COM",
                            NormalizedUserName = "USER_14_F552",
                            PasswordHash = "hafqs/bqfQFvdXmA4EiHuJp2Ny898TuYgICSTniwMaPx2SdmTwmn1+1v/fbm1XVM",
                            PhoneNumber = "+1234567814",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_14_f552@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_14_f552"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_15_f53e@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_15_f53e@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 15",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_15_F53E@EXAMPLE.COM",
                            NormalizedUserName = "USER_15_F53E",
                            PasswordHash = "plv71I1fyJwDrHycTXengZaeRMH/QXmWXK8HDSDSG/ziX9lt24gz0Znurb5Mji1h",
                            PhoneNumber = "+1234567815",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_15_f53e@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_15_f53e"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_16_00a6@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_16_00a6@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 16",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_16_00A6@EXAMPLE.COM",
                            NormalizedUserName = "USER_16_00A6",
                            PasswordHash = "wJmW0fTVQWe6LaBhS9T75LhfGDL9Fk5f2Fuv1XkBOxuVxAiaQUg/DhTvBwI1U8ms",
                            PhoneNumber = "+1234567816",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_16_00a6@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_16_00a6"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_17_c198@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_17_c198@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 17",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_17_C198@EXAMPLE.COM",
                            NormalizedUserName = "USER_17_C198",
                            PasswordHash = "v0CfVvouUU8koO3mL2YJHAmoXSLgzPv2nn1MYBBMTRVVZqKDiowrKUttbNNtYNyG",
                            PhoneNumber = "+1234567817",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_17_c198@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_17_c198"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_18_ba62@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_18_ba62@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 18",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_18_BA62@EXAMPLE.COM",
                            NormalizedUserName = "USER_18_BA62",
                            PasswordHash = "HrRFuG3APIPwt8Yhe3UhbdzSS+FafnZB1KKj83OlZK3tMkNij9Jy0A6s3ry4XJl0",
                            PhoneNumber = "+1234567818",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_18_ba62@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_18_ba62"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_19_eceb@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_19_eceb@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 19",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_19_ECEB@EXAMPLE.COM",
                            NormalizedUserName = "USER_19_ECEB",
                            PasswordHash = "T07z/gl3fO6Y1jKBAUO2nLdIyAZV3I6xGHXgUicVhfyvk69Jy4EN2E5hNO8sj9Gu",
                            PhoneNumber = "+1234567819",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_19_eceb@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_19_eceb"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_20_29f3@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_20_29f3@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 20",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_20_29F3@EXAMPLE.COM",
                            NormalizedUserName = "USER_20_29F3",
                            PasswordHash = "VxvtQo/macrdtjRgAolGc/4Ds/jr2s0QuFv5X143GF+CiuzTWU3XfYv8q3v02kST",
                            PhoneNumber = "+1234567820",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_20_29f3@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_20_29f3"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_21_29e3@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_21_29e3@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 21",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_21_29E3@EXAMPLE.COM",
                            NormalizedUserName = "USER_21_29E3",
                            PasswordHash = "XbROUfy44h2GSmrSOwK0GwefjZdufSpRPa+X+1ZhK2BR+17MCVFh51YT1bd2yHox",
                            PhoneNumber = "+1234567821",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_21_29e3@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_21_29e3"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fca"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_22_3111@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_22_3111@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 22",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_22_3111@EXAMPLE.COM",
                            NormalizedUserName = "USER_22_3111",
                            PasswordHash = "GzjxyEUIyk1rWSzWcLg94hDhLoXlbs9ZYrQxIkZRrJvu4IXqPFRZn3XuRrLmt+fD",
                            PhoneNumber = "+1234567822",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_22_3111@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_22_3111"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fcb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_23_8403@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_23_8403@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 23",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_23_8403@EXAMPLE.COM",
                            NormalizedUserName = "USER_23_8403",
                            PasswordHash = "lSIBkWJ2HeLemjeXGtV3U2CNk2lTVl1aJFtxJpUlkPS/IB+sYadl7+RfMc7LmATD",
                            PhoneNumber = "+1234567823",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_23_8403@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_23_8403"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fcc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_24_ae17@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_24_ae17@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 24",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_24_AE17@EXAMPLE.COM",
                            NormalizedUserName = "USER_24_AE17",
                            PasswordHash = "MZtMmPcSHg++HbABagsimVzCVY97xa1f6WPbn5K1qQJ7lCTlU6Ew28EgET5f0Bjp",
                            PhoneNumber = "+1234567824",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_24_ae17@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_24_ae17"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fcd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_25_40f5@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_25_40f5@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 25",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_25_40F5@EXAMPLE.COM",
                            NormalizedUserName = "USER_25_40F5",
                            PasswordHash = "9wHqbbvf4/yTg7CTJn0qqk3owB6IrWWYWh97rLgtMkQqn2t7pNxhr1CC3Jbw7F8g",
                            PhoneNumber = "+1234567825",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_25_40f5@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_25_40f5"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fce"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_26_307d@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_26_307d@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 26",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_26_307D@EXAMPLE.COM",
                            NormalizedUserName = "USER_26_307D",
                            PasswordHash = "UVq2BGGkfmyDPYFlbVV1XDw9aRTQNPA6+EZ/PZwMeFTVNxiCQ37DmQdlvXz1U2pb",
                            PhoneNumber = "+1234567826",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_26_307d@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_26_307d"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fcf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_27_0b0a@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_27_0b0a@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 27",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_27_0B0A@EXAMPLE.COM",
                            NormalizedUserName = "USER_27_0B0A",
                            PasswordHash = "BGOEB43jdQeJVLREMmC6lylHB+fBZB03w2V5Y555ef5Cbu9Mu50bAlyUViHujaoT",
                            PhoneNumber = "+1234567827",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_27_0b0a@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_27_0b0a"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_28_0a11@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_28_0a11@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 28",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_28_0A11@EXAMPLE.COM",
                            NormalizedUserName = "USER_28_0A11",
                            PasswordHash = "M2bgHZwbvFCyI0vfWnmZLg30wOzLUKf2RZTzWAJSOT1JO1W4C5MiEeohZ8tFvhJt",
                            PhoneNumber = "+1234567828",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_28_0a11@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_28_0a11"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_29_ca1e@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_29_ca1e@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 29",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_29_CA1E@EXAMPLE.COM",
                            NormalizedUserName = "USER_29_CA1E",
                            PasswordHash = "vMl5qPjDBxd08v/8p+bYem0WdZukOKIKKp5Hxg9k3j8s19QHABl0Au2LGnblWhjF",
                            PhoneNumber = "+1234567829",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_29_ca1e@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_29_ca1e"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_30_2711@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_30_2711@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 30",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_30_2711@EXAMPLE.COM",
                            NormalizedUserName = "USER_30_2711",
                            PasswordHash = "9L01GiwR3iSX4rs88EPq+KQhJ1V9/m3HBf2Ly70vtDVzclPhLOnd8X8BI9ut18gt",
                            PhoneNumber = "+1234567830",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_30_2711@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_30_2711"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_31_2522@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_31_2522@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 31",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_31_2522@EXAMPLE.COM",
                            NormalizedUserName = "USER_31_2522",
                            PasswordHash = "g3rFDuh2TjMWH1onad33C+oYuRt7uHjF+bTwt94YR/56LJS/OvNBRJTnV2nxg51k",
                            PhoneNumber = "+1234567831",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_31_2522@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_31_2522"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_32_c27c@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_32_c27c@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 32",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_32_C27C@EXAMPLE.COM",
                            NormalizedUserName = "USER_32_C27C",
                            PasswordHash = "xtgJ5BQ8ClI8bGgBrWr02HvG0VEwbVaw/MxpxY2Vhlj9/dLhAfQ8fF7WUozHblT7",
                            PhoneNumber = "+1234567832",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_32_c27c@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_32_c27c"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_33_da9a@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_33_da9a@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 33",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_33_DA9A@EXAMPLE.COM",
                            NormalizedUserName = "USER_33_DA9A",
                            PasswordHash = "YQIVRrIhCXQxPulRFsfHiIYbk4GQ2h9DUlSUEaNPXjCYDKWwHu1XdWaymV1dMW2r",
                            PhoneNumber = "+1234567833",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_33_da9a@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_33_da9a"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_34_80ad@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_34_80ad@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 34",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_34_80AD@EXAMPLE.COM",
                            NormalizedUserName = "USER_34_80AD",
                            PasswordHash = "c0jethrTYcJkxLgbP6y3SfMeOvz7gxxK1A7h/sFeUZMnmSb0HZY63ZVzjyoLC3Ro",
                            PhoneNumber = "+1234567834",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_34_80ad@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_34_80ad"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_35_c43e@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_35_c43e@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 35",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_35_C43E@EXAMPLE.COM",
                            NormalizedUserName = "USER_35_C43E",
                            PasswordHash = "45bucARY+oSYMCclBjwH/TiCdF5S7w1pbO02im+Isrni1gHo6wJbHCB3fK/J2d9g",
                            PhoneNumber = "+1234567835",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_35_c43e@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_35_c43e"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_36_b16e@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_36_b16e@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 36",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_36_B16E@EXAMPLE.COM",
                            NormalizedUserName = "USER_36_B16E",
                            PasswordHash = "jckJbKCzVs/g0yibKDGBG4UyqJhWZ6cJnqXvoprkrk51Dy8G1pQrhrjLcEZqQxjh",
                            PhoneNumber = "+1234567836",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_36_b16e@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_36_b16e"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_37_700f@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_37_700f@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 37",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_37_700F@EXAMPLE.COM",
                            NormalizedUserName = "USER_37_700F",
                            PasswordHash = "Tw5qyKiaKk01+rO8Ok/i0sjwoHn9fnbFfPOfgmSpPJHMPMerHP7y8V6ExRh8nEw/",
                            PhoneNumber = "+1234567837",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_37_700f@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_37_700f"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fda"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_38_808f@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_38_808f@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 38",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_38_808F@EXAMPLE.COM",
                            NormalizedUserName = "USER_38_808F",
                            PasswordHash = "X0onDdvJssQk73KhOMF7N0LZff3mf6hP4cQhXCf7i08V0ht9+n+lSlFfoNAo8l4Z",
                            PhoneNumber = "+1234567838",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_38_808f@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_38_808f"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fdb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_39_8424@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_39_8424@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 39",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_39_8424@EXAMPLE.COM",
                            NormalizedUserName = "USER_39_8424",
                            PasswordHash = "AUWc6DRemfyPUPYJI7X7ZBHokMOPx2FCbVcCjwUuMpMcIiBT1v3B4l6GwvRCI06K",
                            PhoneNumber = "+1234567839",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_39_8424@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_39_8424"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fdc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_40_b3f0@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_40_b3f0@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 40",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_40_B3F0@EXAMPLE.COM",
                            NormalizedUserName = "USER_40_B3F0",
                            PasswordHash = "7sRrdzTamgGZBaQGirbjpAwG/UYd8VvvLv065inzw1LpHOUNh+ZjZnJcZkLn7ceT",
                            PhoneNumber = "+1234567840",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_40_b3f0@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_40_b3f0"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fdd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_41_25bb@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_41_25bb@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 41",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_41_25BB@EXAMPLE.COM",
                            NormalizedUserName = "USER_41_25BB",
                            PasswordHash = "FwMNY+inSod2CkKyg7gNJtkX7i6L+MTl7aadl33ZO6j3ebHGlew7do0AdifQmo7g",
                            PhoneNumber = "+1234567841",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_41_25bb@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_41_25bb"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fde"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_42_7f1b@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_42_7f1b@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 42",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_42_7F1B@EXAMPLE.COM",
                            NormalizedUserName = "USER_42_7F1B",
                            PasswordHash = "qUaK5vXZuCjz+w/gaeiXKuygsP82UsLdeiVWq+WAKGs1fym45h0cWRY1PWgaPjk6",
                            PhoneNumber = "+1234567842",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_42_7f1b@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_42_7f1b"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fdf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_43_3470@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_43_3470@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 43",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_43_3470@EXAMPLE.COM",
                            NormalizedUserName = "USER_43_3470",
                            PasswordHash = "Td5g1NVP9cR0rvmYb12a2zlLaq/nTSy0rHYIUnfpipvqN8L+MG11K30ye3N2HGnj",
                            PhoneNumber = "+1234567843",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_43_3470@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_43_3470"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_44_4da0@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_44_4da0@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 44",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_44_4DA0@EXAMPLE.COM",
                            NormalizedUserName = "USER_44_4DA0",
                            PasswordHash = "eCREwbiwN8StF0jnRquVbIt2O2SQZMkSsDp0QiME7SBCgi+UxX09lvNBVLdouUdU",
                            PhoneNumber = "+1234567844",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_44_4da0@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_44_4da0"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_45_1bb1@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_45_1bb1@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 45",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_45_1BB1@EXAMPLE.COM",
                            NormalizedUserName = "USER_45_1BB1",
                            PasswordHash = "8yooLrl79RG8BRS2LJyeeEbiJbWX0HQBVgew6pQH3wHdw3mEqWmmDvpOkCF/RMhO",
                            PhoneNumber = "+1234567845",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_45_1bb1@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_45_1bb1"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_46_7ac6@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_46_7ac6@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 46",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_46_7AC6@EXAMPLE.COM",
                            NormalizedUserName = "USER_46_7AC6",
                            PasswordHash = "IxY5dhLD1+LPRAtlRgCia3AFGWp47Atns/TVAv0ilFYjy2VdsflFLTq2irW110rp",
                            PhoneNumber = "+1234567846",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_46_7ac6@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_46_7ac6"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_47_4853@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_47_4853@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 47",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_47_4853@EXAMPLE.COM",
                            NormalizedUserName = "USER_47_4853",
                            PasswordHash = "lgIB2IBPo3hsi0BD74ntqmv5ZjbTKLmrJkGTI3Pk7UePcMn7+EKMvGTGGJHsVn40",
                            PhoneNumber = "+1234567847",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_47_4853@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_47_4853"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_48_5869@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1979, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_48_5869@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 48",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_48_5869@EXAMPLE.COM",
                            NormalizedUserName = "USER_48_5869",
                            PasswordHash = "s8USoDqKoAPKIUS7KOU7rF+wq8mum3+Wiz2jgxJC5hJ4kNtAjZRfJx7HTUaTb6nh",
                            PhoneNumber = "+1234567848",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_48_5869@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_48_5869"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_49_326f@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1979, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_49_326f@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 49",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_49_326F@EXAMPLE.COM",
                            NormalizedUserName = "USER_49_326F",
                            PasswordHash = "KO4tRj9LimBl2eKqi59Kac03NUcBC/fJQ3UrGCotmqlGzguW9RXLL0Qq+V6+d77Z",
                            PhoneNumber = "+1234567849",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_49_326f@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_49_326f"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_50_aa3b@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1979, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_50_aa3b@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 50",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsLoggedIn = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_50_AA3B@EXAMPLE.COM",
                            NormalizedUserName = "USER_50_AA3B",
                            PasswordHash = "Qa42BdVctKszkrbEAVEuoe9gPvZd/LLVZSu5ChyMla6CqBC1jGwfocnqaPSRfjko",
                            PhoneNumber = "+1234567850",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_50_aa3b@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_50_aa3b"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserAccessibilityPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccessibilityPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "AccessibilityPreferenceId");

                    b.HasIndex("AccessibilityPreferenceId");

                    b.ToTable("UserAccessibilityPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserGeographicalPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GeographicalPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "GeographicalPreferenceId");

                    b.HasIndex("GeographicalPreferenceId");

                    b.ToTable("UserGeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserLanguagePreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LanguagePreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "LanguagePreferenceId");

                    b.HasIndex("LanguagePreferenceId");

                    b.ToTable("UserLanguagePreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserMiscellaneousPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MiscellaneousPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "MiscellaneousPreferenceId");

                    b.HasIndex("MiscellaneousPreferenceId");

                    b.ToTable("UserMiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserNotificationPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("NotificationPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "NotificationPreferenceId");

                    b.HasIndex("NotificationPreferenceId");

                    b.ToTable("UserNotificationPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserPrivacyPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PrivacyPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "PrivacyPreferenceId");

                    b.HasIndex("PrivacyPreferenceId");

                    b.ToTable("UserPrivacyPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserThemePreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ThemePreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "ThemePreferenceId");

                    b.HasIndex("ThemePreferenceId");

                    b.ToTable("UserThemePreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.VisitorLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("IPAddress")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Path")
                        .HasColumnType("longtext");

                    b.Property<string>("Referrer")
                        .HasColumnType("longtext");

                    b.Property<string>("SessionId")
                        .HasColumnType("longtext");

                    b.Property<string>("UserAgent")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("VisitorLogs");
                });

            modelBuilder.Entity("CategoryPost", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("char(36)");

                    b.HasKey("CategoriesId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("CategoryPost");
                });

            modelBuilder.Entity("CommentPost", b =>
                {
                    b.Property<Guid>("CommentsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("char(36)");

                    b.HasKey("CommentsId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("CommentPost");
                });

            modelBuilder.Entity("LinkPost", b =>
                {
                    b.Property<Guid>("LinksId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("char(36)");

                    b.HasKey("LinksId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("LinkPost");
                });

            modelBuilder.Entity("SitemapItemTopic", b =>
                {
                    b.Property<Guid>("SitemapItemId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TopicsId")
                        .HasColumnType("char(36)");

                    b.HasKey("SitemapItemId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("SitemapItemTopic");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("Attachments")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.BibliographyItem", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Comment", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.GeographicalPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Country", "Country")
                        .WithMany("GeographicalPreferences")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.DateFormat", "DateFormat")
                        .WithMany("GeographicalPreferences")
                        .HasForeignKey("DateFormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.TimeZone", "TimeZone")
                        .WithMany("GeographicalPreferences")
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Currency");

                    b.Navigation("DateFormat");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Link", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Project", "Project")
                        .WithMany("Links")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFile", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.User", null)
                        .WithMany("AuthoredMarkdownFiles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "ParentMdFile")
                        .WithMany()
                        .HasForeignKey("ParentMdFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ASafariM.Domain.Entities.Project", "Project")
                        .WithMany("MarkdownFiles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParentMdFile");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileHistory", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "MarkdownFile")
                        .WithMany("History")
                        .HasForeignKey("MarkdownFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarkdownFile");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileUser", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "MarkdownFile")
                        .WithMany("MarkdownFileUsers")
                        .HasForeignKey("MarkdownFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany("MarkdownFileUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarkdownFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MiscellaneousPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.FileFormat", "FileFormat")
                        .WithMany("MiscellaneousPreferences")
                        .HasForeignKey("FileFormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.PaginationSettings", "PaginationSettings")
                        .WithMany("MiscellaneousPreferences")
                        .HasForeignKey("PaginationSettingsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FileFormat");

                    b.Navigation("PaginationSettings");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Portfolio", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Post", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostAttachment", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostAttachments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostCategory", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostCategories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostCollaborator", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.User", "Collaborator")
                        .WithMany()
                        .HasForeignKey("CollaboratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostCollaborators")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collaborator");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostComment", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostLink", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostLinks")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Link");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostRelatedPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostRelatedPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", "RelatedPost")
                        .WithMany()
                        .HasForeignKey("RelatedPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("RelatedPost");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostTag", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostTopic", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostTopics")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Topic", "Topic")
                        .WithMany("PostTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProgressHistory", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Project", "Project")
                        .WithOne("Progress")
                        .HasForeignKey("ASafariM.Domain.Entities.ProgressHistory", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Project", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", null)
                        .WithMany("Projects")
                        .HasForeignKey("MarkdownFileId");

                    b.HasOne("ASafariM.Domain.Entities.User", "Owner")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", null)
                        .WithMany("ManagedProjects")
                        .HasForeignKey("UserId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProjectMember", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Project", null)
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId1");

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany("ProjectMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.SitemapItem", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.SitemapItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASafariM.Domain.Entities.SitemapItem", null)
                        .WithMany("ChildItems")
                        .HasForeignKey("SitemapItemId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Tag", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Comment", null)
                        .WithMany("Tags")
                        .HasForeignKey("CommentId");

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("Tags")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ThemePreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.LanguagePreference", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Topic", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Topic", "ParentTopic")
                        .WithMany("ChildTopics")
                        .HasForeignKey("ParentTopicId");

                    b.Navigation("ParentTopic");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.User", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("Collaborators")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserAccessibilityPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.AccessibilityPreference", "AccessibilityPreference")
                        .WithMany()
                        .HasForeignKey("AccessibilityPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessibilityPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserGeographicalPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.GeographicalPreference", "GeographicalPreference")
                        .WithMany()
                        .HasForeignKey("GeographicalPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeographicalPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserLanguagePreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.LanguagePreference", "LanguagePreference")
                        .WithMany()
                        .HasForeignKey("LanguagePreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguagePreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserMiscellaneousPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MiscellaneousPreference", "MiscellaneousPreference")
                        .WithMany()
                        .HasForeignKey("MiscellaneousPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MiscellaneousPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserNotificationPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.NotificationPreference", "NotificationPreference")
                        .WithMany()
                        .HasForeignKey("NotificationPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserPrivacyPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.PrivacyPreference", "PrivacyPreference")
                        .WithMany()
                        .HasForeignKey("PrivacyPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivacyPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserThemePreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.ThemePreference", "ThemePreference")
                        .WithMany()
                        .HasForeignKey("ThemePreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ThemePreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CategoryPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommentPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Comment", null)
                        .WithMany()
                        .HasForeignKey("CommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LinkPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Link", null)
                        .WithMany()
                        .HasForeignKey("LinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SitemapItemTopic", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.SitemapItem", null)
                        .WithMany()
                        .HasForeignKey("SitemapItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Replies");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Country", b =>
                {
                    b.Navigation("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.DateFormat", b =>
                {
                    b.Navigation("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.FileFormat", b =>
                {
                    b.Navigation("MiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFile", b =>
                {
                    b.Navigation("History");

                    b.Navigation("MarkdownFileUsers");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PaginationSettings", b =>
                {
                    b.Navigation("MiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Post", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Collaborators");

                    b.Navigation("PostAttachments");

                    b.Navigation("PostCategories");

                    b.Navigation("PostCollaborators");

                    b.Navigation("PostComments");

                    b.Navigation("PostLinks");

                    b.Navigation("PostRelatedPosts");

                    b.Navigation("PostTags");

                    b.Navigation("PostTopics");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Project", b =>
                {
                    b.Navigation("Links");

                    b.Navigation("MarkdownFiles");

                    b.Navigation("Progress");

                    b.Navigation("ProjectMembers");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.SitemapItem", b =>
                {
                    b.Navigation("ChildItems");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.TimeZone", b =>
                {
                    b.Navigation("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Topic", b =>
                {
                    b.Navigation("ChildTopics");

                    b.Navigation("PostTopics");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.User", b =>
                {
                    b.Navigation("AuthoredMarkdownFiles");

                    b.Navigation("ManagedProjects");

                    b.Navigation("MarkdownFileUsers");

                    b.Navigation("OwnedProjects");

                    b.Navigation("Posts");

                    b.Navigation("ProjectMemberships");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
