// <auto-generated />
using System;
using ASafariM.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASafariM.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250226084701_ProjectUpdated")]
    partial class ProjectUpdated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ASafariM.Domain.Entities.AccessibilityPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("EnableHighContrastMode")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableScreenReaderSupport")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TextScalingFactor")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AccessibilityPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Size")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Capital")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("IsoCode3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IsoCode")
                        .IsUnique();

                    b.HasIndex("IsoCode3")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dde8c486-12e6-4fca-87a0-8b31bcf70050"),
                            Capital = "Brussels",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "BE",
                            IsoCode3 = "BEL",
                            Name = "Belgium",
                            NativeName = "België",
                            PhoneCode = "+32"
                        },
                        new
                        {
                            Id = new Guid("3efb797e-9e62-4e86-b05e-5037e461be9f"),
                            Capital = "Paris",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "FR",
                            IsoCode3 = "FRA",
                            Name = "France",
                            NativeName = "France",
                            PhoneCode = "+33"
                        },
                        new
                        {
                            Id = new Guid("121391ed-b992-4768-93b3-87bb2ca7c29a"),
                            Capital = "Berlin",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "DE",
                            IsoCode3 = "DEU",
                            Name = "Germany",
                            NativeName = "Deutschland",
                            PhoneCode = "+49"
                        },
                        new
                        {
                            Id = new Guid("52752fd1-6850-4d46-b396-ac94a79a5380"),
                            Capital = "Amsterdam",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "NL",
                            IsoCode3 = "NLD",
                            Name = "Netherlands",
                            NativeName = "Nederland",
                            PhoneCode = "+31"
                        },
                        new
                        {
                            Id = new Guid("03d56106-5458-4634-a9ac-2b63c98d21f4"),
                            Capital = "London",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "GB",
                            IsoCode3 = "GBR",
                            Name = "United Kingdom",
                            NativeName = "United Kingdom",
                            PhoneCode = "+44"
                        },
                        new
                        {
                            Id = new Guid("299a1453-669e-4db8-b882-0335598784a8"),
                            Capital = "Rome",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "IT",
                            IsoCode3 = "ITA",
                            Name = "Italy",
                            NativeName = "Italia",
                            PhoneCode = "+39"
                        },
                        new
                        {
                            Id = new Guid("338857c7-aca1-42a4-994c-6ecd87c8e772"),
                            Capital = "Madrid",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "ES",
                            IsoCode3 = "ESP",
                            Name = "Spain",
                            NativeName = "España",
                            PhoneCode = "+34"
                        },
                        new
                        {
                            Id = new Guid("8219507a-dc5a-4a02-b8c0-ba7ad1d1e835"),
                            Capital = "Bern",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "CH",
                            IsoCode3 = "CHE",
                            Name = "Switzerland",
                            NativeName = "Schweiz",
                            PhoneCode = "+41"
                        },
                        new
                        {
                            Id = new Guid("b3bd33d2-150d-4b9d-bff0-dc257ba3f079"),
                            Capital = "Vienna",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "AT",
                            IsoCode3 = "AUT",
                            Name = "Austria",
                            NativeName = "Österreich",
                            PhoneCode = "+43"
                        },
                        new
                        {
                            Id = new Guid("1e73e38a-4295-4e6e-b756-6d6a658f937e"),
                            Capital = "Luxembourg",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "LU",
                            IsoCode3 = "LUX",
                            Name = "Luxembourg",
                            NativeName = "Luxembourg",
                            PhoneCode = "+352"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DecimalPlaces")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8b4e227b-1136-4b13-b83d-1655311188d2"),
                            Code = "EUR",
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 582, DateTimeKind.Utc).AddTicks(2686),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "Euro",
                            Symbol = "€"
                        },
                        new
                        {
                            Id = new Guid("815b2eef-ed9c-4acc-a7bb-5a8aab2ad3da"),
                            Code = "USD",
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 582, DateTimeKind.Utc).AddTicks(3644),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "US Dollar",
                            Symbol = "$"
                        },
                        new
                        {
                            Id = new Guid("b44d5f45-4546-4f46-b964-8307b31cfcfc"),
                            Code = "GBP",
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 582, DateTimeKind.Utc).AddTicks(3675),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "British Pound",
                            Symbol = "£"
                        },
                        new
                        {
                            Id = new Guid("796fad72-78ac-44bb-a3e1-2f4f3a5299b3"),
                            Code = "CHF",
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 582, DateTimeKind.Utc).AddTicks(3682),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "Swiss Franc",
                            Symbol = "Fr."
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.DateFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Example")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Format")
                        .IsUnique();

                    b.ToTable("DateFormats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9550dee8-5d36-42ec-8407-ed59508a6a53"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 582, DateTimeKind.Utc).AddTicks(968),
                            DisplayName = "Belgian/European Date Format",
                            Example = "31/12/2024",
                            Format = "dd/MM/yyyy",
                            IsActive = true,
                            IsDefault = false
                        },
                        new
                        {
                            Id = new Guid("fc4b405a-5579-4877-8e22-cee84044b62d"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 582, DateTimeKind.Utc).AddTicks(1982),
                            DisplayName = "Belgian Date Format (Dot)",
                            Example = "31.12.2024",
                            Format = "dd.MM.yyyy",
                            IsActive = true,
                            IsDefault = false
                        },
                        new
                        {
                            Id = new Guid("1d4dce87-947e-4483-ae34-8ff1729b276e"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 582, DateTimeKind.Utc).AddTicks(1988),
                            DisplayName = "US Date Format",
                            Example = "12/31/2024",
                            Format = "MM/dd/yyyy",
                            IsActive = true,
                            IsDefault = false
                        },
                        new
                        {
                            Id = new Guid("0014142f-aa02-479b-bed1-410b7275b9c9"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 582, DateTimeKind.Utc).AddTicks(1991),
                            DisplayName = "ISO Date Format",
                            Example = "2024-12-31",
                            Format = "yyyy-MM-dd",
                            IsActive = true,
                            IsDefault = false
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.FileFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxSizeInMB")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("SupportsAnnotations")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SupportsEditing")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Extension")
                        .IsUnique();

                    b.HasIndex("MimeType")
                        .IsUnique();

                    b.ToTable("FileFormats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5524fb23-d494-4511-961e-b9088806138b"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 581, DateTimeKind.Utc).AddTicks(6919),
                            Description = "Simple text document format",
                            Extension = ".txt",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "text/plain",
                            Name = "Plain Text",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("5cb67213-fdcf-4719-a897-5147401d75c8"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 581, DateTimeKind.Utc).AddTicks(8053),
                            Description = "TypeScript source code file",
                            Extension = ".ts",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/typescript",
                            Name = "TypeScript",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("16589182-3c84-4c2e-9af8-ee4f33a3022d"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 581, DateTimeKind.Utc).AddTicks(8059),
                            Description = "TypeScript React component file",
                            Extension = ".tsx",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/typescript+react",
                            Name = "TypeScript React",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("64f25bd2-e453-4d41-a8ba-95d1b3fdd4f8"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 581, DateTimeKind.Utc).AddTicks(8061),
                            Description = "JavaScript source code file",
                            Extension = ".js",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/javascript",
                            Name = "JavaScript",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("d8ee0a7a-ceb9-4810-a9eb-7706007d468b"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 581, DateTimeKind.Utc).AddTicks(8063),
                            Description = "JavaScript Object Notation data file",
                            Extension = ".json",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/json",
                            Name = "JSON",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("55a26735-9e42-4a43-ae18-83aac29d8543"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 581, DateTimeKind.Utc).AddTicks(8065),
                            Description = "Markdown text format",
                            Extension = ".md",
                            IsActive = true,
                            IsDefault = false,
                            MaxSizeInMB = 10,
                            MimeType = "text/markdown",
                            Name = "Markdown",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.GeographicalPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DateFormatId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TimeZoneId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DateFormatId");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.LanguagePreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("LanguagePreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Link");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AuthorName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParentMdFileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParentMdFileId");

                    b.HasIndex("ProjectId");

                    b.ToTable("MarkdownFiles");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ChangedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ContentSnapshot")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("MarkdownFileId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("MarkdownFileId");

                    b.ToTable("MarkdownFileHistories");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileUser", b =>
                {
                    b.Property<Guid>("MarkdownFileId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("CollaborationRole")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CollaborationStopDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateCollaborated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MarkdownFileId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MarkdownFileUsers");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MiscellaneousPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DefaultDashboardView")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EnableAutoSave")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableRealTimeUpdates")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("FileFormatId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PaginationSettingsId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("ShowActivityTimeline")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FileFormatId");

                    b.HasIndex("PaginationSettingsId");

                    b.ToTable("MiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.NotificationPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AllowMarketingEmails")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsSubscribedToNewsletter")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NotificationFrequencyInHours")
                        .HasColumnType("int");

                    b.Property<bool>("ReceiveEmailNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ReceiveSmsNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("NotificationPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PaginationSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("EnableInfiniteScroll")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ItemsPerPage")
                        .HasColumnType("int");

                    b.Property<string>("PageSizeOptions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("ShowFirstLastButtons")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowItemsCount")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowPageNumbers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowPageSizeSelector")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VisiblePageRange")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaginationSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6193ac30-14b2-4c4d-be56-442ae714a47a"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 581, DateTimeKind.Utc).AddTicks(8992),
                            EnableInfiniteScroll = false,
                            IsActive = true,
                            IsDefault = false,
                            ItemsPerPage = 10,
                            PageSizeOptions = "[10,20,50,100]",
                            ShowFirstLastButtons = true,
                            ShowItemsCount = true,
                            ShowPageNumbers = true,
                            ShowPageSizeSelector = true,
                            VisiblePageRange = 5
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.PrimitiveCollection<string>("AudioUrls")
                        .HasColumnType("longtext");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Excerpt")
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("ImageUrls")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Slug")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusColor")
                        .HasColumnType("longtext");

                    b.Property<string>("StatusIcon")
                        .HasColumnType("longtext");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("StatusTooltip")
                        .HasColumnType("longtext");

                    b.Property<string>("Summary")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("VideoUrls")
                        .HasColumnType("longtext");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("PostId");

                    b.ToTable("PostAttachment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PostId");

                    b.ToTable("PostCategory");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostCollaborator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CollaboratorId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CollaboratorId");

                    b.HasIndex("PostId");

                    b.ToTable("PostCollaborator");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CommentedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CommenterId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CommenterId");

                    b.HasIndex("PostId");

                    b.ToTable("PostComment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LinkId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.HasIndex("PostId");

                    b.ToTable("PostLink");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelatedPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostRelatedPost");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostTag", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PrivacyPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AllowDataSharing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowSearchByEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("EnableTwoFactorAuthentication")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsProfilePublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("PrivacyPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProgressHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double?>("ActualCost")
                        .HasColumnType("double");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("BudgetVariance")
                        .HasColumnType("double");

                    b.Property<int>("CompletedMilestones")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MitigationPlan")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<double?>("PlannedBudget")
                        .HasColumnType("double");

                    b.Property<DateTime?>("PlannedEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PlannedStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("RiskDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RiskLevel")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatusReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("TimeVarianceInDays")
                        .HasColumnType("int");

                    b.Property<int>("TotalMilestones")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.HasIndex("StatusReason")
                        .IsUnique();

                    b.ToTable("ProgressHistories");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double?>("ActualBudget")
                        .HasColumnType("double");

                    b.Property<double?>("Budget")
                        .HasColumnType("double");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("IsCancelledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("IsCancelledby")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("IsCompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("IsCompletedBy")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsExtended")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("IsExtendedTo")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("IsPausedTo")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("MarkdownFileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<double?>("RemainingBudget")
                        .HasColumnType("double");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MarkdownFileId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProjectMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ProjectMemberType")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("413bbb51-64b3-4c52-8c91-667606c2aba4"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 581, DateTimeKind.Utc).AddTicks(4824),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Admin role has full administrative privileges, except for application management.",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("3475bb84-3db4-4030-8895-cdd6b764938b"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 581, DateTimeKind.Utc).AddTicks(5873),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Manages user interactions and content moderation. They can create and manage their own tasks, projects, and content, and can edit other public articles than their own.",
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("29a914f5-0d34-4aca-a2af-2a8d1090e12b"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 581, DateTimeKind.Utc).AddTicks(5879),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "User role with limited privileges. A user can create and manage their own tasks, projects, and content, and cannot edit other public articles than their own.",
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("bbbf5bb9-deec-4f2a-b705-861e5123ea5e"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 581, DateTimeKind.Utc).AddTicks(5881),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Guest role is the least privileged role. They can only view public articles.",
                            Name = "Guest"
                        },
                        new
                        {
                            Id = new Guid("1f410b04-92a2-4e72-97e5-f02ec4b0039f"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 581, DateTimeKind.Utc).AddTicks(5890),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Focuses on content creation and management without full administrative privileges. They can create and manage their own articles, but cannot edit other public articles than their own.",
                            Name = "Editor"
                        },
                        new
                        {
                            Id = new Guid("3bebe8c9-adcf-47cb-8c87-3a4ee7e9ceeb"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 581, DateTimeKind.Utc).AddTicks(5892),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Has full control over the application and can manage all aspects.",
                            Name = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.SitemapItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessByRole")
                        .HasColumnType("int");

                    b.Property<string>("ArchivedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangeFrequency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExternalLink")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUnpublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParentItemId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Priority")
                        .HasColumnType("double");

                    b.Property<string>("PublishedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("SitemapItemId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UnpublishBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UnpublishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParentItemId");

                    b.HasIndex("SitemapItemId");

                    b.ToTable("SitemapItems");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Slug")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01920b21-024d-4c6b-96f2-91235baf8a33"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Tag description",
                            Name = "Test Tag name",
                            Slug = "test-tag-slug"
                        },
                        new
                        {
                            Id = new Guid("07679d34-90b3-4d50-9848-3c2b96a6c1ec"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Tag description 2",
                            Name = "Test Tag name 2",
                            Slug = "test-tag-slug-2"
                        },
                        new
                        {
                            Id = new Guid("73f7bac7-2c73-4869-b782-32a7f0979879"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Tag description 3",
                            Name = "Test Tag name 3",
                            Slug = "test-tag-slug-3"
                        },
                        new
                        {
                            Id = new Guid("1fee52c8-5ed1-4218-aa16-a92f6d4ee17c"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Test Tag description 4",
                            Name = "Test Tag name 4",
                            Slug = "test-tag-slug-4"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ThemePreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccentColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("DarkModeBackgroundColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DarkModePrimaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DarkModeTextColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FontSize")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDarkModeEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDarkTheme")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHighContrastModeEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReducedMotionEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LightModeBackgroundColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LightModePrimaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LightModeTextColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PrimaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SecondaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TertiaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("ThemePreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.TimeZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DstOffset")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("UsesDaylightSaving")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UtcOffset")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("StandardName")
                        .IsUnique();

                    b.ToTable("TimeZones");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac5cff22-6ec5-46a7-86c5-f782ba2a47fa"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 582, DateTimeKind.Utc).AddTicks(4380),
                            DstOffset = "+02:00",
                            IsActive = true,
                            Name = "CET",
                            StandardName = "Central European Time (Belgium)",
                            UsesDaylightSaving = true,
                            UtcOffset = "+01:00"
                        },
                        new
                        {
                            Id = new Guid("2988f9fb-364a-4aae-928f-7ed10e181422"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 582, DateTimeKind.Utc).AddTicks(5539),
                            DstOffset = "+02:00",
                            IsActive = true,
                            Name = "CEST",
                            StandardName = "Central European Summer Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+02:00"
                        },
                        new
                        {
                            Id = new Guid("037a08e2-1b3c-42aa-9865-4ebebb77cf8e"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 582, DateTimeKind.Utc).AddTicks(5544),
                            DstOffset = "+02:00",
                            IsActive = true,
                            Name = "UTC",
                            StandardName = "Coordinated Universal Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+00:00"
                        },
                        new
                        {
                            Id = new Guid("39b77345-c09e-4982-98d3-f6dc9ea26ecf"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 582, DateTimeKind.Utc).AddTicks(5546),
                            DstOffset = "+01:00",
                            IsActive = true,
                            Name = "WET",
                            StandardName = "Western European Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+00:00"
                        },
                        new
                        {
                            Id = new Guid("5f6d88c8-c02b-419d-b4c3-b57e8d8915ef"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 582, DateTimeKind.Utc).AddTicks(5548),
                            DstOffset = "+03:00",
                            IsActive = true,
                            Name = "EET",
                            StandardName = "Eastern European Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+02:00"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("ParentTopicId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParentTopicId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 583, DateTimeKind.Utc).AddTicks(1695),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Test Topic description",
                            Name = "Test Topic name",
                            Slug = "test-topic-slug"
                        },
                        new
                        {
                            Id = new Guid("0e7c8fb9-ec48-4db2-a935-01b1fff7a35c"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 583, DateTimeKind.Utc).AddTicks(2805),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Test Topic description 2",
                            Name = "Test Topic name 2",
                            ParentTopicId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Slug = "test-topic-slug-2"
                        },
                        new
                        {
                            Id = new Guid("ca75b08f-c5fa-48e5-bc55-fb60642bed4a"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 583, DateTimeKind.Utc).AddTicks(3076),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Test Topic description 3",
                            Name = "Test Topic name 3",
                            Slug = "test-topic-slug-3"
                        },
                        new
                        {
                            Id = new Guid("e1ffebc9-e2ab-4fbc-9af0-6f5a1929418d"),
                            CreatedAt = new DateTime(2025, 2, 26, 8, 46, 55, 583, DateTimeKind.Utc).AddTicks(3082),
                            CreatedBy = new Guid("00000000-0000-0000-0000-000000000000"),
                            Description = "Test Topic description 4",
                            Name = "Test Topic name 4",
                            ParentTopicId = new Guid("3fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Slug = "test-topic-slug-4"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ForgotPasswordToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ForgotPasswordTokenExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBannedByAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEditor")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsModerator")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPending")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsStandardUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LinkUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PasswordResetToken")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PasswordResetTokenExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PenName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool?>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext");

                    b.Property<string>("ReactivationReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReactivationRequestedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool?>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .IsUnique();

                    b.HasIndex("NormalizedUserName")
                        .IsUnique();

                    b.HasIndex("PostId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "demo_admin@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "demo_admin@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "Demo Admin",
                            IsActive = true,
                            IsAdmin = true,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = true,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Account",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO_ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "DEMO_ADMIN",
                            PasswordHash = "FbJXQ7XOvSrmQeqm0VkXF0NNDCozdx5693yLqqhF1G8qXhWVuEs2Vly9CiLTAW7G",
                            PhoneNumber = "+123456789",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "demo_admin@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "demo_admin"
                        },
                        new
                        {
                            Id = new Guid("1048da39-cdaf-47a9-9fb1-960d81dd704b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "demo_user@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "demo_user@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "Demo User",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Account",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO_USER@EXAMPLE.COM",
                            NormalizedUserName = "DEMO_USER",
                            PasswordHash = "2eglRDK78LC4haZrynmOc1dmaf5RooOP+eFO6GcS1/YXWjvZDGS9xkqSy2DuIx46",
                            PhoneNumber = "+1234567890",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "demo_user@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "demo_user"
                        },
                        new
                        {
                            Id = new Guid("1448da39-cdaf-47a9-9fb1-960d81dd704b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "asafarim.it@gmail.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1990, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "asafarim.it@gmail.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "Deleted User",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Account",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASAFARIM.IT@GMAIL.COM",
                            NormalizedUserName = "DELETED_USER",
                            PasswordHash = "jO0au6lVKdVs10F8s5J7DYvHcjD/LXI1LCHyHMa1Aozh8T5GS5WZaYlu1pbGVNM6",
                            PhoneNumber = "+1234567890",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "asafarim.it@gmail.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "deleted_user"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_1_8414@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_1_8414@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 1",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_1_8414@EXAMPLE.COM",
                            NormalizedUserName = "USER_1_8414",
                            PasswordHash = "diJWpmmujBhDQ6o0IFohPJLPvQStz1ESqDxDlSwQWhl3PuAtJV2JiDUoRUzA8FlW",
                            PhoneNumber = "+123456781",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_1_8414@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_1_8414"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_2_225b@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_2_225b@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 2",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_2_225B@EXAMPLE.COM",
                            NormalizedUserName = "USER_2_225B",
                            PasswordHash = "7iuGKLN/XkzcMJTqc+Kr1n2X3AzybNRYhtaKkRdK19OpM37x9rlR4adMJlH0fK0E",
                            PhoneNumber = "+123456782",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_2_225b@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_2_225b"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_3_e36f@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_3_e36f@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 3",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_3_E36F@EXAMPLE.COM",
                            NormalizedUserName = "USER_3_E36F",
                            PasswordHash = "KJvTzFbx56ib2mjMLOboRONhcR7sguyJOaKd21DDtfEDR7j7UYO997PMNYFiE7qq",
                            PhoneNumber = "+123456783",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_3_e36f@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_3_e36f"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_4_3b3b@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_4_3b3b@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 4",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_4_3B3B@EXAMPLE.COM",
                            NormalizedUserName = "USER_4_3B3B",
                            PasswordHash = "IhXbUmddQDJMnS74+tSAtObBL59q2SNDcXd/gupqFg75fQ8mRF3MV5DTZS/d+HBk",
                            PhoneNumber = "+123456784",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_4_3b3b@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_4_3b3b"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_5_dd11@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_5_dd11@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 5",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_5_DD11@EXAMPLE.COM",
                            NormalizedUserName = "USER_5_DD11",
                            PasswordHash = "Cu65hyp/K7eKppJjHfm9/+8n1SX56KhC+Jmen7dv3Tgv1STwQE4KDE8XIOiFZDIH",
                            PhoneNumber = "+123456785",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_5_dd11@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_5_dd11"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fba"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_6_239d@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_6_239d@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 6",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_6_239D@EXAMPLE.COM",
                            NormalizedUserName = "USER_6_239D",
                            PasswordHash = "3JzCXyP/wTAuSYsZ0EqYpXGKoLfLmjO1YT7lIQvi73wPa269Rj+djogp5D8d3wcF",
                            PhoneNumber = "+123456786",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_6_239d@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_6_239d"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_7_1c66@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_7_1c66@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 7",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_7_1C66@EXAMPLE.COM",
                            NormalizedUserName = "USER_7_1C66",
                            PasswordHash = "FsatcwSSJ3ZKCZIigQSja1HHgtIeEqSNphfBOYbCAiJM2xxTGKDOBwRoeH0Fgonl",
                            PhoneNumber = "+123456787",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_7_1c66@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_7_1c66"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_8_0c79@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_8_0c79@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 8",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_8_0C79@EXAMPLE.COM",
                            NormalizedUserName = "USER_8_0C79",
                            PasswordHash = "V949JdTxn2rA+0pCrXB95NwOjcZdyd3kXZECihHG40ulPGOBEmGqMuFZolYJ/N8z",
                            PhoneNumber = "+123456788",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_8_0c79@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_8_0c79"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_9_b29b@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_9_b29b@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 9",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_9_B29B@EXAMPLE.COM",
                            NormalizedUserName = "USER_9_B29B",
                            PasswordHash = "Yjnz2CwNKX7CRtDTQDSVsSxag+EcMREMhWjfA8UBFG+2vEBW7umVf9Ca7QekxwBR",
                            PhoneNumber = "+123456789",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_9_b29b@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_9_b29b"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbe"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_10_9d1e@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_10_9d1e@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 10",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_10_9D1E@EXAMPLE.COM",
                            NormalizedUserName = "USER_10_9D1E",
                            PasswordHash = "G8t3+A4TYHzCth+T1es4Ly6+cEloOjiu5crR4gnBRR5IoK4AEzKj6A7kom85c25b",
                            PhoneNumber = "+1234567810",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_10_9d1e@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_10_9d1e"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_11_f125@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_11_f125@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 11",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_11_F125@EXAMPLE.COM",
                            NormalizedUserName = "USER_11_F125",
                            PasswordHash = "qR/EkuzQcJ2ertSsHyszxbDgArgu6THnfd7HSvQGjwVodNLcrG8fRDZ2cDahbHEt",
                            PhoneNumber = "+1234567811",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_11_f125@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_11_f125"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_12_7be9@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_12_7be9@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 12",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_12_7BE9@EXAMPLE.COM",
                            NormalizedUserName = "USER_12_7BE9",
                            PasswordHash = "DAx6BgDq5167rYcNqH1rHqE1DRi2Su3EtIZeuiu4uA7WlQnpHhPk8nSGzunEmF4P",
                            PhoneNumber = "+1234567812",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_12_7be9@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_12_7be9"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_13_3417@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_13_3417@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 13",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_13_3417@EXAMPLE.COM",
                            NormalizedUserName = "USER_13_3417",
                            PasswordHash = "AKbkBBhCP30oRHZcR38mOEao31Ol7O5qiWICmTTTJOeddag8D99ot7A5z1QZ76Y6",
                            PhoneNumber = "+1234567813",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_13_3417@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_13_3417"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_14_e999@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_14_e999@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 14",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_14_E999@EXAMPLE.COM",
                            NormalizedUserName = "USER_14_E999",
                            PasswordHash = "IHLMJYJoLXyRRkfeBVbs31O2A4sr7oiUmsooq0EZmmcSSr6cBYqv2bJDpmndcCys",
                            PhoneNumber = "+1234567814",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_14_e999@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_14_e999"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_15_afcb@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_15_afcb@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 15",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_15_AFCB@EXAMPLE.COM",
                            NormalizedUserName = "USER_15_AFCB",
                            PasswordHash = "8YXtfsjM+27sZ2ixS3Hi1o6+zG0DBMxSFk+hL6aNm4HG5IKCLn73N7jCZNr4EMEb",
                            PhoneNumber = "+1234567815",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_15_afcb@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_15_afcb"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_16_a028@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_16_a028@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 16",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_16_A028@EXAMPLE.COM",
                            NormalizedUserName = "USER_16_A028",
                            PasswordHash = "nDmmpwqE0vGKW2JNtIe0SMn4Ac32LcDEHbB3yvilTDZpNdpE5zBa284FKXh+B21g",
                            PhoneNumber = "+1234567816",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_16_a028@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_16_a028"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_17_575a@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_17_575a@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 17",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_17_575A@EXAMPLE.COM",
                            NormalizedUserName = "USER_17_575A",
                            PasswordHash = "wro25MbdSugpXG/EHCwTpN4BBzhDwGQ8Y7BAKGHXuQ5ZLl/uztwpvGde6k3oK+xI",
                            PhoneNumber = "+1234567817",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_17_575a@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_17_575a"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_18_e474@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_18_e474@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 18",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_18_E474@EXAMPLE.COM",
                            NormalizedUserName = "USER_18_E474",
                            PasswordHash = "vLl4vilrSpnf/6GFHMz7vzBKeUr/ZwvwWj4hH3fJHVHvV6YR4S1R4kKPyLY9SKQB",
                            PhoneNumber = "+1234567818",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_18_e474@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_18_e474"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_19_6100@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_19_6100@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 19",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_19_6100@EXAMPLE.COM",
                            NormalizedUserName = "USER_19_6100",
                            PasswordHash = "2gK20OJS8p6KS8m7pvG5Nz3VGgmXySdX8jCTWyn3pqyE7ao/M5580vNPl4FuOpip",
                            PhoneNumber = "+1234567819",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_19_6100@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_19_6100"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_20_098a@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_20_098a@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 20",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_20_098A@EXAMPLE.COM",
                            NormalizedUserName = "USER_20_098A",
                            PasswordHash = "6V11c1T3FDZZ4sSdvEuWMBDzOllXNDxxnWUiRWr9+MFRt1GvZlIw12+yGwLpcG3o",
                            PhoneNumber = "+1234567820",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_20_098a@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_20_098a"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_21_fb9d@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_21_fb9d@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 21",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_21_FB9D@EXAMPLE.COM",
                            NormalizedUserName = "USER_21_FB9D",
                            PasswordHash = "JvnX8PDnRt59+sV16aJ0CF4U68490PhtWQQt1auUnFRdo9lJnz0/Z8G4tn8HS4RZ",
                            PhoneNumber = "+1234567821",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_21_fb9d@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_21_fb9d"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fca"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_22_82f4@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_22_82f4@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 22",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_22_82F4@EXAMPLE.COM",
                            NormalizedUserName = "USER_22_82F4",
                            PasswordHash = "OTcNlqVBgrJLQ1x/kSUbhheqJy5Ngz4MdHQFggcVEdXP2IqDavfZJ1P2CIhm0dzN",
                            PhoneNumber = "+1234567822",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_22_82f4@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_22_82f4"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fcb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_23_fe48@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_23_fe48@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 23",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_23_FE48@EXAMPLE.COM",
                            NormalizedUserName = "USER_23_FE48",
                            PasswordHash = "rKGZ9FMDsb3Hf0TZUicVdnQLTp1lvK1aCZ5X5djXJ8Fbnd283IZbe1VlsoFzZufU",
                            PhoneNumber = "+1234567823",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_23_fe48@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_23_fe48"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fcc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_24_6118@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_24_6118@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 24",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_24_6118@EXAMPLE.COM",
                            NormalizedUserName = "USER_24_6118",
                            PasswordHash = "TJwaIGhM9R1PYKJFxNvc6ErJt7DVn6+XbMpzeZLohoG4X+9XEJJku0bRtVK+ylNg",
                            PhoneNumber = "+1234567824",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_24_6118@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_24_6118"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fcd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_25_fd2c@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_25_fd2c@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 25",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_25_FD2C@EXAMPLE.COM",
                            NormalizedUserName = "USER_25_FD2C",
                            PasswordHash = "0Wp3c0pWjonEIckHuJ3I84B/OXkKbvzQQMZhSp0Nh1yT/UehajrtTTClVot7HEgQ",
                            PhoneNumber = "+1234567825",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_25_fd2c@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_25_fd2c"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fce"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_26_74e2@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_26_74e2@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 26",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_26_74E2@EXAMPLE.COM",
                            NormalizedUserName = "USER_26_74E2",
                            PasswordHash = "J36yQvRge51D7jdlxX2CkgMFR84QUBt/fc163r9Wz8Y+U3QbwWztVJHdRfYNZa+b",
                            PhoneNumber = "+1234567826",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_26_74e2@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_26_74e2"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fcf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_27_aced@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_27_aced@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 27",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_27_ACED@EXAMPLE.COM",
                            NormalizedUserName = "USER_27_ACED",
                            PasswordHash = "h3j82f7Olc6Ek4rEb6ZnN8oO2HjHAuoE1iilbpYiqtA/W/7Y6LVtZw96nilxHT6r",
                            PhoneNumber = "+1234567827",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_27_aced@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_27_aced"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_28_9573@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_28_9573@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 28",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_28_9573@EXAMPLE.COM",
                            NormalizedUserName = "USER_28_9573",
                            PasswordHash = "q2oE7AL95cz8e43fjNkSvJy8LPt+4Y8h5hCGce59rlg0fjQ/VrM11qkYXMdQlLNg",
                            PhoneNumber = "+1234567828",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_28_9573@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_28_9573"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_29_8b86@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_29_8b86@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 29",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_29_8B86@EXAMPLE.COM",
                            NormalizedUserName = "USER_29_8B86",
                            PasswordHash = "I7YsYm0E07mC7bLTWHfIdHifofVsLH95EyBzFC7zShBzJttw0EGUHyIvaWb3IxpR",
                            PhoneNumber = "+1234567829",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_29_8b86@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_29_8b86"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_30_d639@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_30_d639@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 30",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_30_D639@EXAMPLE.COM",
                            NormalizedUserName = "USER_30_D639",
                            PasswordHash = "hlNxifdC24rQlvyeDD96XI8jk2TQ7m1PVajniPLzH0i6wgYaLT8VjcFf4iPM18q9",
                            PhoneNumber = "+1234567830",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_30_d639@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_30_d639"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_31_3e53@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_31_3e53@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 31",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_31_3E53@EXAMPLE.COM",
                            NormalizedUserName = "USER_31_3E53",
                            PasswordHash = "z8CoIuKMpWyoFBjtrHOGKbaK3UnMbdu+/sWa3lDuUHaw6Uj1Xh1pMo23adxNNFB6",
                            PhoneNumber = "+1234567831",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_31_3e53@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_31_3e53"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_32_4114@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_32_4114@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 32",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_32_4114@EXAMPLE.COM",
                            NormalizedUserName = "USER_32_4114",
                            PasswordHash = "568jXMRIO6/4indsJJUg4jN1STEAhmldI0cQ9Y/VqeOTPW3VjzHiasQfXjE0mTRi",
                            PhoneNumber = "+1234567832",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_32_4114@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_32_4114"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_33_4f7c@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_33_4f7c@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 33",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_33_4F7C@EXAMPLE.COM",
                            NormalizedUserName = "USER_33_4F7C",
                            PasswordHash = "wohaiHIXUlIoeyG5HlpCgxEMjqD0VgyXWFJxGPBiEKmoOWXIMJXxDddURbCd6ugM",
                            PhoneNumber = "+1234567833",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_33_4f7c@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_33_4f7c"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_34_7587@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_34_7587@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 34",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_34_7587@EXAMPLE.COM",
                            NormalizedUserName = "USER_34_7587",
                            PasswordHash = "fqvf5gLLFMTnDU2fRsK1trFy9mJVbPtGQd4i5cKkeuLavODm7yIk5KEkfoOSUewS",
                            PhoneNumber = "+1234567834",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_34_7587@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_34_7587"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_35_57f9@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_35_57f9@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 35",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_35_57F9@EXAMPLE.COM",
                            NormalizedUserName = "USER_35_57F9",
                            PasswordHash = "hhFh3mBiDZWmLaPh9UN2k/UqIVxklf3p2L14kDCwOiquGdKn/bB54xL5/4Ma5SkO",
                            PhoneNumber = "+1234567835",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_35_57f9@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_35_57f9"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_36_bf10@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_36_bf10@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 36",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_36_BF10@EXAMPLE.COM",
                            NormalizedUserName = "USER_36_BF10",
                            PasswordHash = "EMnZgFJ2wJ1gcX9xG3KNNidWyzhXQq4qYB4W2X8qFBo9Z/GdDicE3mPKjZIOuxZJ",
                            PhoneNumber = "+1234567836",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_36_bf10@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_36_bf10"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_37_713d@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_37_713d@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 37",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_37_713D@EXAMPLE.COM",
                            NormalizedUserName = "USER_37_713D",
                            PasswordHash = "PQB8Wzxq2UgPQDXdc4UBzKXQdsAgtMM6net3Fx8krmxunx7lsiY7A65O8I0ZBWZN",
                            PhoneNumber = "+1234567837",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_37_713d@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_37_713d"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fda"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_38_abd4@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_38_abd4@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 38",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_38_ABD4@EXAMPLE.COM",
                            NormalizedUserName = "USER_38_ABD4",
                            PasswordHash = "FTG36Tz6RZfb9klFPcKJLnLdaqoJbs02qOdBnx6WB4Px47WG0mS8hoDA6tIg8Uaa",
                            PhoneNumber = "+1234567838",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_38_abd4@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_38_abd4"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fdb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_39_dd7d@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_39_dd7d@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 39",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_39_DD7D@EXAMPLE.COM",
                            NormalizedUserName = "USER_39_DD7D",
                            PasswordHash = "Y+wka8WuAqYWjuuFJY3SWXzmWnya/15DHssX4mGgEo+68x6o1Y741ONt9igBMlYl",
                            PhoneNumber = "+1234567839",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_39_dd7d@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_39_dd7d"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fdc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_40_685d@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_40_685d@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 40",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_40_685D@EXAMPLE.COM",
                            NormalizedUserName = "USER_40_685D",
                            PasswordHash = "h18KUK1S4S5U5seuLe6RxXJ6YCBtRUs4uH5msZP2QfXi96c/SHY+/5RnAr9Ge9J9",
                            PhoneNumber = "+1234567840",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_40_685d@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_40_685d"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fdd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_41_6ec2@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_41_6ec2@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 41",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_41_6EC2@EXAMPLE.COM",
                            NormalizedUserName = "USER_41_6EC2",
                            PasswordHash = "fZGUFBwBjry0GVIgr4UG3rAu5l+TimDEtWqJPY1jT3BhqOzCLTYJvlDCQWfqBAFe",
                            PhoneNumber = "+1234567841",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_41_6ec2@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_41_6ec2"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fde"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_42_d7e9@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_42_d7e9@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 42",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_42_D7E9@EXAMPLE.COM",
                            NormalizedUserName = "USER_42_D7E9",
                            PasswordHash = "SGueps9XgbXgE7+JRMwvK4fpziqRiqqmXhg7n3lcENLCHdx+gfo+T6Q/Uw8of6WT",
                            PhoneNumber = "+1234567842",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_42_d7e9@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_42_d7e9"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fdf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_43_ddb4@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_43_ddb4@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 43",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_43_DDB4@EXAMPLE.COM",
                            NormalizedUserName = "USER_43_DDB4",
                            PasswordHash = "T7AyP2llSeHusNOSEea5k2uqkRbR6J5XC/jwcxfzdfcO5Otpp7RndSES2IvX9EpJ",
                            PhoneNumber = "+1234567843",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_43_ddb4@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_43_ddb4"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_44_7025@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_44_7025@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 44",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_44_7025@EXAMPLE.COM",
                            NormalizedUserName = "USER_44_7025",
                            PasswordHash = "c4kdS9Mt2W5LFtQbDiCs+NUxV4Kd0+Oou2WBZLH/1os9FCZjWpcyVR05/bgOZUjk",
                            PhoneNumber = "+1234567844",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_44_7025@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_44_7025"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_45_fe9a@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_45_fe9a@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 45",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_45_FE9A@EXAMPLE.COM",
                            NormalizedUserName = "USER_45_FE9A",
                            PasswordHash = "cuq0drW4773ycBbQb//Jf8JdyKbhGqZbA8BZuT1BvBwcOeZVfnsDod3AJ7ODjgtA",
                            PhoneNumber = "+1234567845",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_45_fe9a@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_45_fe9a"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_46_4eb8@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_46_4eb8@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 46",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_46_4EB8@EXAMPLE.COM",
                            NormalizedUserName = "USER_46_4EB8",
                            PasswordHash = "4k5g318JivTJYdP1XEZwZRcHzOMZeSh6+0dFjd0AtFbBN3/16y49KMnrXoZjGtuf",
                            PhoneNumber = "+1234567846",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_46_4eb8@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_46_4eb8"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_47_c723@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_47_c723@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 47",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_47_C723@EXAMPLE.COM",
                            NormalizedUserName = "USER_47_C723",
                            PasswordHash = "8wEPjdUitjS5izbFXNgh586qPWC2CGAmAAEcMYBgG7MpqM15LU6jvb+MgGCLpKzz",
                            PhoneNumber = "+1234567847",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_47_c723@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_47_c723"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_48_5591@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1979, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_48_5591@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 48",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_48_5591@EXAMPLE.COM",
                            NormalizedUserName = "USER_48_5591",
                            PasswordHash = "iS0G/2ewwIOLl3VkWTDgN62pUPb2JmNVT3mLQ7Ia87B1CS7FwDaBxS2hVfhdBD3/",
                            PhoneNumber = "+1234567848",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_48_5591@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_48_5591"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_49_58b4@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1979, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_49_58b4@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 49",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_49_58B4@EXAMPLE.COM",
                            NormalizedUserName = "USER_49_58B4",
                            PasswordHash = "H3c9/HTMWmdwmXp5u4aoMSx33WXAcJoFm1DkueXPTJhgG7joR27S3bIwKaYCtx6+",
                            PhoneNumber = "+1234567849",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_49_58b4@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_49_58b4"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_50_23e7@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1979, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_50_23e7@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 50",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_50_23E7@EXAMPLE.COM",
                            NormalizedUserName = "USER_50_23E7",
                            PasswordHash = "HuGq0ZjpjtbZKYvZuucmSOcrM4rjhYcjgfz7RIhVZKzx4bxAr8Pa6G4zJNCJMolN",
                            PhoneNumber = "+1234567850",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_50_23e7@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_50_23e7"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserAccessibilityPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccessibilityPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "AccessibilityPreferenceId");

                    b.HasIndex("AccessibilityPreferenceId");

                    b.ToTable("UserAccessibilityPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserGeographicalPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GeographicalPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "GeographicalPreferenceId");

                    b.HasIndex("GeographicalPreferenceId");

                    b.ToTable("UserGeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserLanguagePreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LanguagePreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "LanguagePreferenceId");

                    b.HasIndex("LanguagePreferenceId");

                    b.ToTable("UserLanguagePreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserMiscellaneousPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MiscellaneousPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "MiscellaneousPreferenceId");

                    b.HasIndex("MiscellaneousPreferenceId");

                    b.ToTable("UserMiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserNotificationPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("NotificationPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "NotificationPreferenceId");

                    b.HasIndex("NotificationPreferenceId");

                    b.ToTable("UserNotificationPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserPrivacyPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PrivacyPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "PrivacyPreferenceId");

                    b.HasIndex("PrivacyPreferenceId");

                    b.ToTable("UserPrivacyPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserThemePreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ThemePreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "ThemePreferenceId");

                    b.HasIndex("ThemePreferenceId");

                    b.ToTable("UserThemePreferences");
                });

            modelBuilder.Entity("AttachmentPost", b =>
                {
                    b.Property<Guid>("AttachmentsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("char(36)");

                    b.HasKey("AttachmentsId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("AttachmentPost");
                });

            modelBuilder.Entity("CategoryPost", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("char(36)");

                    b.HasKey("CategoriesId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("CategoryPost");
                });

            modelBuilder.Entity("CommentPost", b =>
                {
                    b.Property<Guid>("CommentsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("char(36)");

                    b.HasKey("CommentsId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("CommentPost");
                });

            modelBuilder.Entity("LinkPost", b =>
                {
                    b.Property<Guid>("LinksId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("char(36)");

                    b.HasKey("LinksId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("LinkPost");
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.Property<Guid>("PostsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagsId")
                        .HasColumnType("char(36)");

                    b.HasKey("PostsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("PostTag");
                });

            modelBuilder.Entity("SitemapItemTopic", b =>
                {
                    b.Property<Guid>("SitemapItemId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TopicsId")
                        .HasColumnType("char(36)");

                    b.HasKey("SitemapItemId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("SitemapItemTopic");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.GeographicalPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Country", "Country")
                        .WithMany("GeographicalPreferences")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.DateFormat", "DateFormat")
                        .WithMany("GeographicalPreferences")
                        .HasForeignKey("DateFormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.TimeZone", "TimeZone")
                        .WithMany("GeographicalPreferences")
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Currency");

                    b.Navigation("DateFormat");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFile", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.User", null)
                        .WithMany("AuthoredMarkdownFiles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "ParentMdFile")
                        .WithMany()
                        .HasForeignKey("ParentMdFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ASafariM.Domain.Entities.Project", "Project")
                        .WithMany("MarkdownFiles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParentMdFile");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileHistory", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "MarkdownFile")
                        .WithMany("History")
                        .HasForeignKey("MarkdownFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarkdownFile");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileUser", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "MarkdownFile")
                        .WithMany("MarkdownFileUsers")
                        .HasForeignKey("MarkdownFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany("MarkdownFileUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarkdownFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MiscellaneousPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.FileFormat", "FileFormat")
                        .WithMany("MiscellaneousPreferences")
                        .HasForeignKey("FileFormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.PaginationSettings", "PaginationSettings")
                        .WithMany("MiscellaneousPreferences")
                        .HasForeignKey("PaginationSettingsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FileFormat");

                    b.Navigation("PaginationSettings");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Post", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("RelatedPosts")
                        .HasForeignKey("PostId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostAttachment", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("PostAttachments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostCategory", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("PostCategories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostCollaborator", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.User", "Collaborator")
                        .WithMany()
                        .HasForeignKey("CollaboratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("PostCollaborators")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collaborator");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostComment", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.User", "Commenter")
                        .WithMany()
                        .HasForeignKey("CommenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commenter");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostLink", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("PostLinks")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Link");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelatedPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", "RelatedPost")
                        .WithMany("PostRelatedPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RelatedPost");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostTag", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProgressHistory", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Project", "Project")
                        .WithOne("Progress")
                        .HasForeignKey("ASafariM.Domain.Entities.ProgressHistory", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Project", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", null)
                        .WithMany("Projects")
                        .HasForeignKey("MarkdownFileId");

                    b.HasOne("ASafariM.Domain.Entities.User", "Owner")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", null)
                        .WithMany("ManagedProjects")
                        .HasForeignKey("UserId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProjectMember", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany("ProjectMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.SitemapItem", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.SitemapItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASafariM.Domain.Entities.SitemapItem", null)
                        .WithMany("ChildItems")
                        .HasForeignKey("SitemapItemId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ThemePreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.LanguagePreference", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Topic", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Topic", "ParentTopic")
                        .WithMany("ChildTopics")
                        .HasForeignKey("ParentTopicId");

                    b.Navigation("ParentTopic");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.User", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("Collaborators")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserAccessibilityPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.AccessibilityPreference", "AccessibilityPreference")
                        .WithMany()
                        .HasForeignKey("AccessibilityPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessibilityPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserGeographicalPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.GeographicalPreference", "GeographicalPreference")
                        .WithMany()
                        .HasForeignKey("GeographicalPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeographicalPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserLanguagePreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.LanguagePreference", "LanguagePreference")
                        .WithMany()
                        .HasForeignKey("LanguagePreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguagePreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserMiscellaneousPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MiscellaneousPreference", "MiscellaneousPreference")
                        .WithMany()
                        .HasForeignKey("MiscellaneousPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MiscellaneousPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserNotificationPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.NotificationPreference", "NotificationPreference")
                        .WithMany()
                        .HasForeignKey("NotificationPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserPrivacyPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.PrivacyPreference", "PrivacyPreference")
                        .WithMany()
                        .HasForeignKey("PrivacyPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivacyPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserThemePreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.ThemePreference", "ThemePreference")
                        .WithMany()
                        .HasForeignKey("ThemePreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ThemePreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AttachmentPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Attachment", null)
                        .WithMany()
                        .HasForeignKey("AttachmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CategoryPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommentPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Comment", null)
                        .WithMany()
                        .HasForeignKey("CommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LinkPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Link", null)
                        .WithMany()
                        .HasForeignKey("LinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostTag", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SitemapItemTopic", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.SitemapItem", null)
                        .WithMany()
                        .HasForeignKey("SitemapItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Country", b =>
                {
                    b.Navigation("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.DateFormat", b =>
                {
                    b.Navigation("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.FileFormat", b =>
                {
                    b.Navigation("MiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFile", b =>
                {
                    b.Navigation("History");

                    b.Navigation("MarkdownFileUsers");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PaginationSettings", b =>
                {
                    b.Navigation("MiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Post", b =>
                {
                    b.Navigation("Collaborators");

                    b.Navigation("PostAttachments");

                    b.Navigation("PostCategories");

                    b.Navigation("PostCollaborators");

                    b.Navigation("PostComments");

                    b.Navigation("PostLinks");

                    b.Navigation("PostRelatedPosts");

                    b.Navigation("PostTags");

                    b.Navigation("RelatedPosts");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Project", b =>
                {
                    b.Navigation("MarkdownFiles");

                    b.Navigation("Progress");

                    b.Navigation("ProjectMembers");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.SitemapItem", b =>
                {
                    b.Navigation("ChildItems");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.TimeZone", b =>
                {
                    b.Navigation("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Topic", b =>
                {
                    b.Navigation("ChildTopics");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.User", b =>
                {
                    b.Navigation("AuthoredMarkdownFiles");

                    b.Navigation("ManagedProjects");

                    b.Navigation("MarkdownFileUsers");

                    b.Navigation("OwnedProjects");

                    b.Navigation("Posts");

                    b.Navigation("ProjectMemberships");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
