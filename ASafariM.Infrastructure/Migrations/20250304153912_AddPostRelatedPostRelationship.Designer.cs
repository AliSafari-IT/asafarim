// <auto-generated />
using System;
using ASafariM.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASafariM.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250304153912_AddPostRelatedPostRelationship")]
    partial class AddPostRelatedPostRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ASafariM.Domain.Entities.AccessibilityPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("EnableHighContrastMode")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableScreenReaderSupport")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TextScalingFactor")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AccessibilityPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Assignee")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Size")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Attachment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ParentCommentId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Capital")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("varchar(2)");

                    b.Property<string>("IsoCode3")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("IsoCode")
                        .IsUnique();

                    b.HasIndex("IsoCode3")
                        .IsUnique();

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f97ec75-15b1-43c0-8e92-fbcf8adcfad4"),
                            Capital = "Brussels",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "BE",
                            IsoCode3 = "BEL",
                            Name = "Belgium",
                            NativeName = "België",
                            PhoneCode = "+32"
                        },
                        new
                        {
                            Id = new Guid("49703bb1-5422-45f4-8350-c38bc715c34d"),
                            Capital = "Paris",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "FR",
                            IsoCode3 = "FRA",
                            Name = "France",
                            NativeName = "France",
                            PhoneCode = "+33"
                        },
                        new
                        {
                            Id = new Guid("33cc27d0-453b-490c-a84c-0463ba6cc55e"),
                            Capital = "Berlin",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "DE",
                            IsoCode3 = "DEU",
                            Name = "Germany",
                            NativeName = "Deutschland",
                            PhoneCode = "+49"
                        },
                        new
                        {
                            Id = new Guid("62308f13-07f3-498e-9103-41b5ef334450"),
                            Capital = "Amsterdam",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "NL",
                            IsoCode3 = "NLD",
                            Name = "Netherlands",
                            NativeName = "Nederland",
                            PhoneCode = "+31"
                        },
                        new
                        {
                            Id = new Guid("acc0e240-2422-4cbd-98b5-df581430b10e"),
                            Capital = "London",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "GB",
                            IsoCode3 = "GBR",
                            Name = "United Kingdom",
                            NativeName = "United Kingdom",
                            PhoneCode = "+44"
                        },
                        new
                        {
                            Id = new Guid("6232278d-e7b7-46ad-832d-b19e178a5e65"),
                            Capital = "Rome",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "IT",
                            IsoCode3 = "ITA",
                            Name = "Italy",
                            NativeName = "Italia",
                            PhoneCode = "+39"
                        },
                        new
                        {
                            Id = new Guid("e214a56d-c348-4cbe-bf7a-e4c798ae7495"),
                            Capital = "Madrid",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "ES",
                            IsoCode3 = "ESP",
                            Name = "Spain",
                            NativeName = "España",
                            PhoneCode = "+34"
                        },
                        new
                        {
                            Id = new Guid("ea7567dd-11db-4414-877b-df4c2c216c86"),
                            Capital = "Bern",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "CH",
                            IsoCode3 = "CHE",
                            Name = "Switzerland",
                            NativeName = "Schweiz",
                            PhoneCode = "+41"
                        },
                        new
                        {
                            Id = new Guid("49dc1c42-25c3-4773-9e25-844fed18e64d"),
                            Capital = "Vienna",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "AT",
                            IsoCode3 = "AUT",
                            Name = "Austria",
                            NativeName = "Österreich",
                            PhoneCode = "+43"
                        },
                        new
                        {
                            Id = new Guid("178fb5c9-0e15-4590-853d-60f1a6254722"),
                            Capital = "Luxembourg",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsoCode = "LU",
                            IsoCode3 = "LUX",
                            Name = "Luxembourg",
                            NativeName = "Luxembourg",
                            PhoneCode = "+352"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DecimalPlaces")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f4613664-22ae-4f2c-8d01-be6260b38c39"),
                            Code = "EUR",
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(8204),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "Euro",
                            Symbol = "€"
                        },
                        new
                        {
                            Id = new Guid("29242680-ba1e-4d6e-8854-8fd194f28166"),
                            Code = "USD",
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(9214),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "US Dollar",
                            Symbol = "$"
                        },
                        new
                        {
                            Id = new Guid("0afb6230-629a-425c-84e6-a448f12c13fe"),
                            Code = "GBP",
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(9227),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "British Pound",
                            Symbol = "£"
                        },
                        new
                        {
                            Id = new Guid("5b6fbb5a-6ba5-4d4b-aaa1-6104430f6443"),
                            Code = "CHF",
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(9230),
                            DecimalPlaces = 2,
                            IsActive = true,
                            Name = "Swiss Franc",
                            Symbol = "Fr."
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.DateFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Example")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Format")
                        .IsUnique();

                    b.ToTable("DateFormats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1d971b5-7c2b-4fef-b4ae-ed26829d49e4"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(6189),
                            CreatedBy = "System",
                            DisplayName = "Belgian/European Date Format",
                            Example = "31/12/2024",
                            Format = "dd/MM/yyyy",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("94c93979-b739-41ab-9be2-5cbbfb639c76"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(7385),
                            CreatedBy = "System",
                            DisplayName = "Belgian Date Format (Dot)",
                            Example = "31.12.2024",
                            Format = "dd.MM.yyyy",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("f44fd3dc-5878-46fc-b822-df3348435779"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(7390),
                            CreatedBy = "System",
                            DisplayName = "US Date Format",
                            Example = "12/31/2024",
                            Format = "MM/dd/yyyy",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false
                        },
                        new
                        {
                            Id = new Guid("59cb0ed6-bac1-4af4-adc5-2819c0f02eda"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(7393),
                            CreatedBy = "System",
                            DisplayName = "ISO Date Format",
                            Example = "2024-12-31",
                            Format = "yyyy-MM-dd",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.FileFormat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MaxSizeInMB")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("SupportsAnnotations")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SupportsEditing")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Extension")
                        .IsUnique();

                    b.HasIndex("MimeType")
                        .IsUnique();

                    b.ToTable("FileFormats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("928a387d-40d1-4212-94b3-5d2e34a4334c"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(1587),
                            CreatedBy = "System",
                            Description = "Simple text document format",
                            Extension = ".txt",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            MaxSizeInMB = 10,
                            MimeType = "text/plain",
                            Name = "Plain Text",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("89b14cc1-7c20-4acc-ab30-3bb970fcb6d2"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(2846),
                            CreatedBy = "System",
                            Description = "TypeScript source code file",
                            Extension = ".ts",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/typescript",
                            Name = "TypeScript",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("21ebfdaa-fd22-44b5-9b1e-02f3256a842a"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(2850),
                            CreatedBy = "System",
                            Description = "TypeScript React component file",
                            Extension = ".tsx",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/typescript+react",
                            Name = "TypeScript React",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("0ed17047-9715-4031-b5cb-d9020eda4654"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(2903),
                            CreatedBy = "System",
                            Description = "JavaScript source code file",
                            Extension = ".js",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/javascript",
                            Name = "JavaScript",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("19607e5f-6efa-45fe-94fc-eb503849b6c1"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(2906),
                            CreatedBy = "System",
                            Description = "JavaScript Object Notation data file",
                            Extension = ".json",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            MaxSizeInMB = 10,
                            MimeType = "application/json",
                            Name = "JSON",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        },
                        new
                        {
                            Id = new Guid("6d99caca-5806-4be8-b6f1-d7c23c1af2d5"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(2909),
                            CreatedBy = "System",
                            Description = "Markdown text format",
                            Extension = ".md",
                            IsActive = true,
                            IsDefault = false,
                            IsDeleted = false,
                            MaxSizeInMB = 10,
                            MimeType = "text/markdown",
                            Name = "Markdown",
                            SupportsAnnotations = true,
                            SupportsEditing = false
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.GeographicalPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("DateFormatId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("TimeZoneId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DateFormatId");

                    b.HasIndex("TimeZoneId");

                    b.ToTable("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Initiative", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.PrimitiveCollection<string>("GoalItems")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.PrimitiveCollection<string>("TeamMembers")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Initiatives");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.LanguagePreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("LanguagePreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Link", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Link");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AuthorName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("ParentMdFileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ParentMdFileId");

                    b.HasIndex("ProjectId");

                    b.ToTable("MarkdownFiles");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("ChangedByUserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ContentSnapshot")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("MarkdownFileId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("MarkdownFileId");

                    b.ToTable("MarkdownFileHistories");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileUser", b =>
                {
                    b.Property<Guid>("MarkdownFileId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<int>("CollaborationRole")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CollaborationStopDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateCollaborated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("MarkdownFileId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("MarkdownFileUsers");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MiscellaneousPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DefaultDashboardView")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("EnableAutoSave")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EnableRealTimeUpdates")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("FileFormatId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PaginationSettingsId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("ShowActivityTimeline")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FileFormatId");

                    b.HasIndex("PaginationSettingsId");

                    b.ToTable("MiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.NotificationPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AllowMarketingEmails")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsSubscribedToNewsletter")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("NotificationFrequencyInHours")
                        .HasColumnType("int");

                    b.Property<bool>("ReceiveEmailNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ReceiveSmsNotifications")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("NotificationPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PaginationSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("EnableInfiniteScroll")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ItemsPerPage")
                        .HasColumnType("int");

                    b.Property<string>("PageSizeOptions")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("ShowFirstLastButtons")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowItemsCount")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowPageNumbers")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowPageSizeSelector")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("VisiblePageRange")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PaginationSettings");

                    b.HasData(
                        new
                        {
                            Id = new Guid("48cb7ade-f2bb-4426-8d02-b912876e4cca"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(4061),
                            EnableInfiniteScroll = false,
                            IsActive = true,
                            IsDefault = false,
                            ItemsPerPage = 10,
                            PageSizeOptions = "[10,20,50,100]",
                            ShowFirstLastButtons = true,
                            ShowItemsCount = true,
                            ShowPageNumbers = true,
                            ShowPageSizeSelector = true,
                            VisiblePageRange = 5
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.PrimitiveCollection<string>("AudioUrls")
                        .HasColumnType("longtext");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("char(36)");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Excerpt")
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("ImageUrls")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Slug")
                        .HasColumnType("longtext");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("StatusColor")
                        .HasColumnType("longtext");

                    b.Property<string>("StatusIcon")
                        .HasColumnType("longtext");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("StatusTooltip")
                        .HasColumnType("longtext");

                    b.Property<string>("Summary")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.PrimitiveCollection<string>("VideoUrls")
                        .HasColumnType("longtext");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("AttachedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("PostId");

                    b.ToTable("PostAttachment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PostId");

                    b.ToTable("PostCategory");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostCollaborator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CollaboratorId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CollaboratorId");

                    b.HasIndex("PostId");

                    b.ToTable("PostCollaborator");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CommentedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.ToTable("PostComment");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LinkId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("LinkedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LinkId");

                    b.HasIndex("PostId");

                    b.ToTable("PostLink");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostRelatedPost", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RelatedPostId")
                        .HasColumnType("char(36)");

                    b.HasKey("PostId", "RelatedPostId");

                    b.HasIndex("RelatedPostId");

                    b.ToTable("PostRelatedPost");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostTag", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TagId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostTopic", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("PostId", "TopicId");

                    b.HasIndex("TopicId");

                    b.ToTable("PostTopic");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PrivacyPreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AllowDataSharing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowSearchByEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<bool>("EnableTwoFactorAuthentication")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsProfilePublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PrivacyPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProgressHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double?>("ActualCost")
                        .HasColumnType("double");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("BudgetVariance")
                        .HasColumnType("double");

                    b.Property<int>("CompletedMilestones")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MitigationPlan")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<double?>("PlannedBudget")
                        .HasColumnType("double");

                    b.Property<DateTime?>("PlannedEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PlannedStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProgressPercentage")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<string>("RiskDescription")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RiskLevel")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StatusReason")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("TimeVarianceInDays")
                        .HasColumnType("int");

                    b.Property<int>("TotalMilestones")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId")
                        .IsUnique();

                    b.HasIndex("StatusReason")
                        .IsUnique();

                    b.ToTable("ProgressHistories");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<double?>("ActualBudget")
                        .HasColumnType("double");

                    b.Property<double?>("Budget")
                        .HasColumnType("double");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CancelledBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("CompletedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ExtendedUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExtended")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("MarkdownFileId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("PausedUntil")
                        .HasColumnType("datetime(6)");

                    b.Property<double?>("RemainingBudget")
                        .HasColumnType("double");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MarkdownFileId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProjectMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("char(36)");

                    b.Property<int>("ProjectMemberType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4fbba298-ccbc-4f2d-b394-ff33b23fe274"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 393, DateTimeKind.Utc).AddTicks(9539),
                            CreatedBy = "System",
                            Description = "Admin role has full administrative privileges, except for application management.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("b53b026d-ae7b-497c-a851-e02c4fba9892"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(565),
                            CreatedBy = "System",
                            Description = "Manages user interactions and content moderation. They can create and manage their own tasks, projects, and content, and can edit other public articles than their own.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Moderator"
                        },
                        new
                        {
                            Id = new Guid("61e4acc8-fc16-43e3-80ac-80bda54b2cfb"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(569),
                            CreatedBy = "System",
                            Description = "User role with limited privileges. A user can create and manage their own tasks, projects, and content, and cannot edit other public articles than their own.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("fb62843b-9af4-4be7-ac4d-5bae89f98695"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(572),
                            CreatedBy = "System",
                            Description = "Guest role is the least privileged role. They can only view public articles.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Guest"
                        },
                        new
                        {
                            Id = new Guid("03d2cf8f-beb8-4455-ade0-efc5635e5c6a"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(575),
                            CreatedBy = "System",
                            Description = "Focuses on content creation and management without full administrative privileges. They can create and manage their own articles, but cannot edit other public articles than their own.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Editor"
                        },
                        new
                        {
                            Id = new Guid("b4d0e151-3155-4508-9ee7-5110e74b2ce1"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 394, DateTimeKind.Utc).AddTicks(579),
                            CreatedBy = "System",
                            Description = "Has full control over the application and can manage all aspects.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.SitemapItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessByRole")
                        .HasColumnType("int");

                    b.Property<string>("ArchivedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ChangeFrequency")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalLink")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExternalLink")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUnpublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ParentItemId")
                        .HasColumnType("char(36)");

                    b.Property<double>("Priority")
                        .HasColumnType("double");

                    b.Property<string>("PublishedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("SitemapItemId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UnpublishBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UnpublishDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParentItemId");

                    b.HasIndex("SitemapItemId");

                    b.ToTable("SitemapItems");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("CommentId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc4840eb-149b-4b6d-afaa-3c13376c3694"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 395, DateTimeKind.Utc).AddTicks(6053),
                            CreatedBy = "System",
                            Description = "Test Tag description",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Tag name",
                            Slug = "test-tag-slug"
                        },
                        new
                        {
                            Id = new Guid("8e21f077-05a1-4fce-ab74-6967fd7e4eec"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 395, DateTimeKind.Utc).AddTicks(6823),
                            CreatedBy = "System",
                            Description = "Test Tag description 2",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Tag name 2",
                            Slug = "test-tag-slug-2"
                        },
                        new
                        {
                            Id = new Guid("4245e448-8c62-45dd-961d-29892f7eb482"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 395, DateTimeKind.Utc).AddTicks(6827),
                            CreatedBy = "System",
                            Description = "Test Tag description 3",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Tag name 3",
                            Slug = "test-tag-slug-3"
                        },
                        new
                        {
                            Id = new Guid("cff3246d-a9c3-4807-811d-a8a23eb0cfb7"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 395, DateTimeKind.Utc).AddTicks(6835),
                            CreatedBy = "System",
                            Description = "Test Tag description 4",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Tag name 4",
                            Slug = "test-tag-slug-4"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ThemePreference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AccentColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BackgroundColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("DarkModeBackgroundColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DarkModePrimaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DarkModeTextColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FontSize")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDarkModeEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDarkTheme")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsHighContrastModeEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReducedMotionEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("LightModeBackgroundColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LightModePrimaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LightModeTextColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PrimaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SecondaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TertiaryColor")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("ThemePreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.TimeZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DstOffset")
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StandardName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("UsesDaylightSaving")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UtcOffset")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("varchar(6)");

                    b.HasKey("Id");

                    b.HasIndex("StandardName")
                        .IsUnique();

                    b.ToTable("TimeZones");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2bb72b8-ee0e-4233-9206-da0a1f040fc1"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 395, DateTimeKind.Utc).AddTicks(48),
                            DstOffset = "+02:00",
                            IsActive = true,
                            Name = "CET",
                            StandardName = "Central European Time (Belgium)",
                            UsesDaylightSaving = true,
                            UtcOffset = "+01:00"
                        },
                        new
                        {
                            Id = new Guid("f1860167-41bf-4f7b-8cea-0e5022a98c25"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 395, DateTimeKind.Utc).AddTicks(1423),
                            DstOffset = "+02:00",
                            IsActive = true,
                            Name = "CEST",
                            StandardName = "Central European Summer Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+02:00"
                        },
                        new
                        {
                            Id = new Guid("04405d90-002a-4f4f-9d90-33a4a086f334"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 395, DateTimeKind.Utc).AddTicks(1430),
                            DstOffset = "+02:00",
                            IsActive = true,
                            Name = "UTC",
                            StandardName = "Coordinated Universal Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+00:00"
                        },
                        new
                        {
                            Id = new Guid("71839c3f-b9eb-435b-a3e2-d770ed71f5e1"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 395, DateTimeKind.Utc).AddTicks(1432),
                            DstOffset = "+01:00",
                            IsActive = true,
                            Name = "WET",
                            StandardName = "Western European Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+00:00"
                        },
                        new
                        {
                            Id = new Guid("f378bf36-407d-4e6d-b07e-5a0c64fb7c01"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 395, DateTimeKind.Utc).AddTicks(1434),
                            DstOffset = "+03:00",
                            IsActive = true,
                            Name = "EET",
                            StandardName = "Eastern European Time",
                            UsesDaylightSaving = true,
                            UtcOffset = "+02:00"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("DeletedMessage")
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<Guid?>("ParentTopicId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ParentTopicId");

                    b.HasIndex("Slug")
                        .IsUnique();

                    b.ToTable("Topics");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 395, DateTimeKind.Utc).AddTicks(9315),
                            CreatedBy = "System",
                            Description = "Test Topic description",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Topic name",
                            Slug = "test-topic-slug"
                        },
                        new
                        {
                            Id = new Guid("46ca0aa4-6554-4af2-a727-2c0827ea5e98"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 396, DateTimeKind.Utc).AddTicks(538),
                            CreatedBy = "System",
                            Description = "Test Topic description 2",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Topic name 2",
                            ParentTopicId = new Guid("1fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Slug = "test-topic-slug-2"
                        },
                        new
                        {
                            Id = new Guid("33bd44b3-77b1-4387-91fc-89dfe23cc74b"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 396, DateTimeKind.Utc).AddTicks(544),
                            CreatedBy = "System",
                            Description = "Test Topic description 3",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Topic name 3",
                            Slug = "test-topic-slug-3"
                        },
                        new
                        {
                            Id = new Guid("f96c65f7-fa93-455b-aea2-5690680b1f6d"),
                            CreatedAt = new DateTime(2025, 3, 4, 15, 39, 6, 396, DateTimeKind.Utc).AddTicks(547),
                            CreatedBy = "System",
                            Description = "Test Topic description 4",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Test Topic name 4",
                            ParentTopicId = new Guid("1fa85f64-5717-4562-b3fc-2c963f66afa6"),
                            Slug = "test-topic-slug-4"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Biography")
                        .HasMaxLength(1500)
                        .HasColumnType("varchar(1500)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DeletedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ForgotPasswordToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ForgotPasswordTokenExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBannedByAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEditor")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsModerator")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPending")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsStandardUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LinkUrl")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("PasswordResetToken")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("PasswordResetTokenExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PenName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("longtext");

                    b.Property<string>("ReactivationReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReactivationRequestedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("char(36)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Website")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .IsUnique();

                    b.HasIndex("NormalizedUserName")
                        .IsUnique();

                    b.HasIndex("PostId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "demo_admin@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "demo_admin@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "Demo Admin",
                            IsActive = true,
                            IsAdmin = true,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = true,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Account",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO_ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "DEMO_ADMIN",
                            PasswordHash = "UZynG9It5F5OEZBDRFivIriozPvGEKrwSJF+tmaDB7vlFaRZNMujNPJrwZcX59Qz",
                            PhoneNumber = "+123456789",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "demo_admin@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "demo_admin"
                        },
                        new
                        {
                            Id = new Guid("1048da39-cdaf-47a9-9fb1-960d81dd704b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "demo_user@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "demo_user@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "Demo User",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Account",
                            LockoutEnabled = false,
                            NormalizedEmail = "DEMO_USER@EXAMPLE.COM",
                            NormalizedUserName = "DEMO_USER",
                            PasswordHash = "pBJO16ZRczDcsw7FaG1xmMsy0zfjB4vHQirDRcIw2zB43qADu0P3PNBPiLUkwE9A",
                            PhoneNumber = "+1234567890",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "demo_user@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "demo_user"
                        },
                        new
                        {
                            Id = new Guid("1448da39-cdaf-47a9-9fb1-960d81dd704b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "asafarim.it@gmail.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1990, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "asafarim.it@gmail.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "Deleted User",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Account",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASAFARIM.IT@GMAIL.COM",
                            NormalizedUserName = "DELETED_USER",
                            PasswordHash = "+7hN3xXgEpCAr6b4IV/Dwou/jjHRbGi24sUvn7YEgY/cBH2q6GIByRzD1HfEDmSM",
                            PhoneNumber = "+1234567890",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "asafarim.it@gmail.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "deleted_user"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_1_896b@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_1_896b@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 1",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_1_896B@EXAMPLE.COM",
                            NormalizedUserName = "USER_1_896B",
                            PasswordHash = "IeXh6bndC0xxyMCBjDviM4cl0EHB0QB6aSfz2uWTe+TR7uAZgcDhXZ49IwEIFqjw",
                            PhoneNumber = "+123456781",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_1_896b@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_1_896b"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_2_bf21@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_2_bf21@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 2",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_2_BF21@EXAMPLE.COM",
                            NormalizedUserName = "USER_2_BF21",
                            PasswordHash = "mMGexvN+vZne5JnXekyNGtjDx1sCVmZL0kUZPwdSVp0MqtrGlhSLD9EpezmdJzba",
                            PhoneNumber = "+123456782",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_2_bf21@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_2_bf21"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_3_0be1@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_3_0be1@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 3",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_3_0BE1@EXAMPLE.COM",
                            NormalizedUserName = "USER_3_0BE1",
                            PasswordHash = "rnIyZtmtVAM52XYp67QhyrZY0l7ghT4bQ9zWwZ+C+jotha5mUEX9KM7Qrhyc0Oyg",
                            PhoneNumber = "+123456783",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_3_0be1@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_3_0be1"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_4_32ea@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_4_32ea@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 4",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_4_32EA@EXAMPLE.COM",
                            NormalizedUserName = "USER_4_32EA",
                            PasswordHash = "KsjOSwrhIUzq96yRBNEIkAIkP1NacE4T6urJVM3Bo74gF5eAgYRd++JHKDJEHR9b",
                            PhoneNumber = "+123456784",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_4_32ea@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_4_32ea"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fb9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_5_2889@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_5_2889@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 5",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_5_2889@EXAMPLE.COM",
                            NormalizedUserName = "USER_5_2889",
                            PasswordHash = "Sx9h4ySHPULmFAIhAlQ7qbx7Yo/EBksB8OuA6RNMdikTqFSX8O7C4uEy7yeCzwKf",
                            PhoneNumber = "+123456785",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_5_2889@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_5_2889"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fba"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_6_3e29@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_6_3e29@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 6",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_6_3E29@EXAMPLE.COM",
                            NormalizedUserName = "USER_6_3E29",
                            PasswordHash = "CR4ujjFPrn5sIzTnWWlMh8FBndWfZbJW0ZdfYzjWbXOiZmc15/HZoS3Un2BtRDHE",
                            PhoneNumber = "+123456786",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_6_3e29@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_6_3e29"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_7_47b1@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 8, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_7_47b1@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 7",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_7_47B1@EXAMPLE.COM",
                            NormalizedUserName = "USER_7_47B1",
                            PasswordHash = "rBlJ63Zm5OdLQSuR2gkT5V09WtVdWVaAXV+tzK7jnILAUYdA0TgJup3096tgSFhV",
                            PhoneNumber = "+123456787",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_7_47b1@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_7_47b1"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_8_fda4@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_8_fda4@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 8",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_8_FDA4@EXAMPLE.COM",
                            NormalizedUserName = "USER_8_FDA4",
                            PasswordHash = "ze1jkMRYfdvyO6e0W2fq82KVkqipe7EwF7Qrm1gGk4qLA4IHyUdNVKo2NWq0TEeZ",
                            PhoneNumber = "+123456788",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_8_fda4@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_8_fda4"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_9_da72@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_9_da72@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 9",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_9_DA72@EXAMPLE.COM",
                            NormalizedUserName = "USER_9_DA72",
                            PasswordHash = "WF4bf9zIO/DSMTtjiEi5UUK8PLs+ayUSzD7/6d2etUUxw0fwBQN9uZm53TOhjxDU",
                            PhoneNumber = "+123456789",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_9_da72@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_9_da72"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbe"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_10_57b0@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_10_57b0@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 10",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_10_57B0@EXAMPLE.COM",
                            NormalizedUserName = "USER_10_57B0",
                            PasswordHash = "fd0uYVp5FWuVq3SUUz/wxBObQdBOgiKucFzemob2GpTRM+wWa1c+jE2kyZmAfPXV",
                            PhoneNumber = "+1234567810",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_10_57b0@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_10_57b0"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fbf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_11_56cc@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1975, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_11_56cc@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 11",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_11_56CC@EXAMPLE.COM",
                            NormalizedUserName = "USER_11_56CC",
                            PasswordHash = "/m+ZaWx+HmUQOo1txRt+M3m0Iahg2R6ZNlA20on5FBMippnC6TPr+K5EQhva21lL",
                            PhoneNumber = "+1234567811",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_11_56cc@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_11_56cc"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_12_3dec@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 1, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_12_3dec@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 12",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_12_3DEC@EXAMPLE.COM",
                            NormalizedUserName = "USER_12_3DEC",
                            PasswordHash = "OK4hcbZVadEB45y8jqn/6Zk1dxGvjY2Rs3POTCjv4Mm9qqIfTvolnBjXqbLeKSei",
                            PhoneNumber = "+1234567812",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_12_3dec@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_12_3dec"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_13_88a1@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_13_88a1@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 13",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_13_88A1@EXAMPLE.COM",
                            NormalizedUserName = "USER_13_88A1",
                            PasswordHash = "VEWK9shyhD0gDAFDC5CsdrI9Nmf1gkF7PpaxeZwSacYvGHgFdbHuRk6g+BqZKGL+",
                            PhoneNumber = "+1234567813",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_13_88a1@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_13_88a1"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_14_debe@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_14_debe@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 14",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_14_DEBE@EXAMPLE.COM",
                            NormalizedUserName = "USER_14_DEBE",
                            PasswordHash = "sJ52sSso1mRoV7t5A4xpFm+lkwlHGnlfwmHeMXJFqWg65i4dVcO5LTrarPTVUbIR",
                            PhoneNumber = "+1234567814",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_14_debe@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_14_debe"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_15_c5bf@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 4, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_15_c5bf@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 15",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_15_C5BF@EXAMPLE.COM",
                            NormalizedUserName = "USER_15_C5BF",
                            PasswordHash = "ZnLU1k+ZcUI07TfnE/IAMTK6+GE4mgXAyjRtoCwUCGh6bLkar355fVz+tNcLgkmt",
                            PhoneNumber = "+1234567815",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_15_c5bf@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_15_c5bf"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_16_4142@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_16_4142@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 16",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_16_4142@EXAMPLE.COM",
                            NormalizedUserName = "USER_16_4142",
                            PasswordHash = "rRwe+VqApBR/lSsrkOpcZ1UKz5RuL3Qr6ToEV0WXr1MWWDYHEnSA4JYp0BoJfOyQ",
                            PhoneNumber = "+1234567816",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_16_4142@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_16_4142"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_17_bc80@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_17_bc80@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 17",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_17_BC80@EXAMPLE.COM",
                            NormalizedUserName = "USER_17_BC80",
                            PasswordHash = "mkkaDosje8sb0Dn09ly5EDgOqCnQeCGxHR+vQBoqa2sVTYEB1fcFFb3Ia/D5JAfT",
                            PhoneNumber = "+1234567817",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_17_bc80@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_17_bc80"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_18_3588@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_18_3588@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 18",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_18_3588@EXAMPLE.COM",
                            NormalizedUserName = "USER_18_3588",
                            PasswordHash = "zO9r/cAceL1klt6IP6Wm7t26fLo0iNi3R96Q90isUmmBufk3f+vXmAg7WfuUAM17",
                            PhoneNumber = "+1234567818",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_18_3588@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_18_3588"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_19_dca4@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_19_dca4@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 19",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_19_DCA4@EXAMPLE.COM",
                            NormalizedUserName = "USER_19_DCA4",
                            PasswordHash = "OfNuA1WcWyOuQuZCcyc2amsXvIkwO+aY3EkZ+JTH9JCuYZ6aOU3bhRru/dL5prEK",
                            PhoneNumber = "+1234567819",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_19_dca4@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_19_dca4"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_20_7868@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_20_7868@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 20",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_20_7868@EXAMPLE.COM",
                            NormalizedUserName = "USER_20_7868",
                            PasswordHash = "M9MDtnudq0Tjsj4gO2+kRAgfDlOspZ89XKukvlstOPJ9pq/fyd+wRPW9V2ktWNEu",
                            PhoneNumber = "+1234567820",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_20_7868@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_20_7868"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fc9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_21_53f6@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_21_53f6@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 21",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_21_53F6@EXAMPLE.COM",
                            NormalizedUserName = "USER_21_53F6",
                            PasswordHash = "aCKZc6ZntRiBKLOrF9nE71kCfUE+e9YHrzuKCWjhaGBRwmuWsykEGeRUr4a0ZWTQ",
                            PhoneNumber = "+1234567821",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_21_53f6@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_21_53f6"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fca"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_22_3adf@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_22_3adf@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 22",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_22_3ADF@EXAMPLE.COM",
                            NormalizedUserName = "USER_22_3ADF",
                            PasswordHash = "1EW7Wdlanm4E/Eu2/11epSb+gauk6XZmj+SdsNQcSB1rw7lmKhg6jQ9Fm0xWtyN3",
                            PhoneNumber = "+1234567822",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_22_3adf@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_22_3adf"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fcb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_23_de6d@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1976, 12, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_23_de6d@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 23",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_23_DE6D@EXAMPLE.COM",
                            NormalizedUserName = "USER_23_DE6D",
                            PasswordHash = "bLCtiP5cTPS1RMyKQ5gabkRHK44k6hFKMaNhfBHd13r/5zOou4iHLD7Aepat/Fxl",
                            PhoneNumber = "+1234567823",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_23_de6d@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_23_de6d"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fcc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_24_bb5c@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_24_bb5c@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 24",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_24_BB5C@EXAMPLE.COM",
                            NormalizedUserName = "USER_24_BB5C",
                            PasswordHash = "ToI43Cdn/IBx8Wy7z7cZukrhwt2VvSruOQaAeQWsai0mfCUM08oBQlMltJ561Xp3",
                            PhoneNumber = "+1234567824",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_24_bb5c@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_24_bb5c"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fcd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_25_4abf@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_25_4abf@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 25",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_25_4ABF@EXAMPLE.COM",
                            NormalizedUserName = "USER_25_4ABF",
                            PasswordHash = "eQUhbCBGhnM1qd/E8XdosaxY7FDmb2Qa5wSAi0ZiAx+VGQwqwo2hKZ163Xtv7Bdy",
                            PhoneNumber = "+1234567825",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_25_4abf@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_25_4abf"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fce"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_26_c9f2@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_26_c9f2@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 26",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_26_C9F2@EXAMPLE.COM",
                            NormalizedUserName = "USER_26_C9F2",
                            PasswordHash = "3IZCYi0gYyy9sWdlAIIqryTdh56lhDeFWnawtNKMJzYZTaOgzoXLh2F5XnRrdwAq",
                            PhoneNumber = "+1234567826",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_26_c9f2@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_26_c9f2"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fcf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_27_9dfe@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 4, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_27_9dfe@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 27",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_27_9DFE@EXAMPLE.COM",
                            NormalizedUserName = "USER_27_9DFE",
                            PasswordHash = "VyOSEHhdYzHYygeoxjGiVlI6BVFcGorPtXU1IZ6exJAtIjwrll+8peaZq3qL/TGX",
                            PhoneNumber = "+1234567827",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_27_9dfe@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_27_9dfe"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_28_6a7f@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_28_6a7f@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 28",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_28_6A7F@EXAMPLE.COM",
                            NormalizedUserName = "USER_28_6A7F",
                            PasswordHash = "1F817PGCTBgWRANTkdFM2SYr9xjh3yLoxQJ1pl6UofdkJP4D3r+3Tu8R0QieYGue",
                            PhoneNumber = "+1234567828",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_28_6a7f@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_28_6a7f"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_29_3d12@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_29_3d12@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 29",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_29_3D12@EXAMPLE.COM",
                            NormalizedUserName = "USER_29_3D12",
                            PasswordHash = "O3x9xZ6IWZGzYX724bQiNlozWEmPoqBRkJk1u/oa8I4aVryXVxSt05BdL8P3mcig",
                            PhoneNumber = "+1234567829",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_29_3d12@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_29_3d12"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_30_1639@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_30_1639@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 30",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_30_1639@EXAMPLE.COM",
                            NormalizedUserName = "USER_30_1639",
                            PasswordHash = "esz+Mnsin+pljtYPoW9Xc5vBHa8PeXCziGp3WYG6W4YLCwaKYFJTSGSrW6U1s9rz",
                            PhoneNumber = "+1234567830",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_30_1639@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_30_1639"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_31_d3b0@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_31_d3b0@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 31",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_31_D3B0@EXAMPLE.COM",
                            NormalizedUserName = "USER_31_D3B0",
                            PasswordHash = "YELgst2a7OYX3CA3N+IQPrb5ml4D5bPDgOGuUDwDW5wF4g3e9TxWE+ND+vqcqII2",
                            PhoneNumber = "+1234567831",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_31_d3b0@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_31_d3b0"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_32_3926@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_32_3926@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 32",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_32_3926@EXAMPLE.COM",
                            NormalizedUserName = "USER_32_3926",
                            PasswordHash = "OZ4nEs2mQ1EtkXeG5h28L8ZNq4yo9O3uVAPTtZ0v48mUPPzJ0Zbcdknj1kpmH45t",
                            PhoneNumber = "+1234567832",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_32_3926@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_32_3926"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_33_1305@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 10, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_33_1305@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 33",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_33_1305@EXAMPLE.COM",
                            NormalizedUserName = "USER_33_1305",
                            PasswordHash = "tTOSZJupBW9CzxAZlN20aR1kEOMkw1ec9ZAru3svm0XWX4qD+OsbuBHhl0zCJw4r",
                            PhoneNumber = "+1234567833",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_33_1305@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_33_1305"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_34_1f71@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 11, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_34_1f71@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 34",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_34_1F71@EXAMPLE.COM",
                            NormalizedUserName = "USER_34_1F71",
                            PasswordHash = "aQuuEFumeXtBMkAntpRgl7y2gOsmDARHAH/iv6Px1/1PaOzy4M+yuZNZz6cZsM4P",
                            PhoneNumber = "+1234567834",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_34_1f71@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_34_1f71"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_35_1017@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1977, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_35_1017@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 35",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_35_1017@EXAMPLE.COM",
                            NormalizedUserName = "USER_35_1017",
                            PasswordHash = "bEWiFExXreyabXbAziAyJZytP8tug2THafKp4JO+Qs4bp51llh4lRNY0EWAD5Ihj",
                            PhoneNumber = "+1234567835",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_35_1017@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_35_1017"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd8"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_36_3652@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_36_3652@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 36",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_36_3652@EXAMPLE.COM",
                            NormalizedUserName = "USER_36_3652",
                            PasswordHash = "GjB54KJWGcKNitUGoA29RyLpnTyJWyPeVc4A4FwdPL1Q5elc6/plEtPQ1c545mR/",
                            PhoneNumber = "+1234567836",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_36_3652@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_36_3652"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fd9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_37_4eab@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_37_4eab@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 37",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_37_4EAB@EXAMPLE.COM",
                            NormalizedUserName = "USER_37_4EAB",
                            PasswordHash = "qmBprZFQCbfHhc0Z7Mnt2iKnyiZtO2Z3Mw1fpzHvJPTn+1z4Y38Iloepa+I7rxBt",
                            PhoneNumber = "+1234567837",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_37_4eab@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_37_4eab"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fda"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_38_190e@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_38_190e@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 38",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_38_190E@EXAMPLE.COM",
                            NormalizedUserName = "USER_38_190E",
                            PasswordHash = "9Jp1RmEhq88L2y5QHFEnRIpTbcpLbA3CEy/IHdmdy4e81EN3DJn3HoD6ktt2MTKN",
                            PhoneNumber = "+1234567838",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_38_190e@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_38_190e"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fdb"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_39_53ba@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_39_53ba@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 39",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_39_53BA@EXAMPLE.COM",
                            NormalizedUserName = "USER_39_53BA",
                            PasswordHash = "LYXdIWFff5e+uOgYn0+3kp+c4MTWRhUunCTWJ3fo0Sp3Pfmh35WZkWreiwT1be8C",
                            PhoneNumber = "+1234567839",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_39_53ba@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_39_53ba"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fdc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_40_c5a4@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_40_c5a4@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 40",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_40_C5A4@EXAMPLE.COM",
                            NormalizedUserName = "USER_40_C5A4",
                            PasswordHash = "C9sOMGH8ziKqW2UeVjbwsDgHimEa19aT1fQwn3StdXVfZJJjhtUm0u1dI/X1KzPD",
                            PhoneNumber = "+1234567840",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_40_c5a4@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_40_c5a4"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fdd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_41_da8a@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_41_da8a@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 41",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_41_DA8A@EXAMPLE.COM",
                            NormalizedUserName = "USER_41_DA8A",
                            PasswordHash = "k/xo4rJPa7PlMuuBdzaWngflhPTctR+0U/QtOk23qQiWDCbRxEo/PrsjlwdfwQlj",
                            PhoneNumber = "+1234567841",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_41_da8a@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_41_da8a"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fde"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_42_ea20@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_42_ea20@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 42",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_42_EA20@EXAMPLE.COM",
                            NormalizedUserName = "USER_42_EA20",
                            PasswordHash = "SUSEaOKtXCI08nhdUfzYPNpBn/UjNyW//np42TMpHexoX2kJownT4ETZDXHvTbj2",
                            PhoneNumber = "+1234567842",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_42_ea20@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_42_ea20"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fdf"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_43_7fa1@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 8, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_43_7fa1@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 43",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_43_7FA1@EXAMPLE.COM",
                            NormalizedUserName = "USER_43_7FA1",
                            PasswordHash = "C6s9RVGLluhJAvPcWs6mMN2ktnqs42qQJdGAiPawT3oq00608cpcbBZYt80l0dCv",
                            PhoneNumber = "+1234567843",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_43_7fa1@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_43_7fa1"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_44_594c@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_44_594c@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 44",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_44_594C@EXAMPLE.COM",
                            NormalizedUserName = "USER_44_594C",
                            PasswordHash = "LGEs+TUNW7UB+mCvmkYAHjw7tD9d9k/4wDl1NZ1y9HVlI7w4rNqkXaujZtMSl1hs",
                            PhoneNumber = "+1234567844",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_44_594c@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_44_594c"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe1"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_45_cab6@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 10, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_45_cab6@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 45",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_45_CAB6@EXAMPLE.COM",
                            NormalizedUserName = "USER_45_CAB6",
                            PasswordHash = "0Lt914cDw62yNm6jrFhB2+0IOOk73pRE4qaD2YZF+xXE8W8u5ZOYxpG9XGGYIFj8",
                            PhoneNumber = "+1234567845",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_45_cab6@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_45_cab6"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe2"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_46_7d3e@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 11, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_46_7d3e@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 46",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_46_7D3E@EXAMPLE.COM",
                            NormalizedUserName = "USER_46_7D3E",
                            PasswordHash = "8pIngPE+FWxNKszTgJp30jPo+wQ/tZpQezxAbwZxrFVlgv6uzy6i60l7GqGU6mDu",
                            PhoneNumber = "+1234567846",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_46_7d3e@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_46_7d3e"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe3"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_47_7e67@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1978, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_47_7e67@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 47",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_47_7E67@EXAMPLE.COM",
                            NormalizedUserName = "USER_47_7E67",
                            PasswordHash = "umCqeJxA4EtqSIZ6rGQQGlvd4IM/CZNZC/jyzeT9zrGZBFDHOjaoVcLN+88jIe77",
                            PhoneNumber = "+1234567847",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_47_7e67@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_47_7e67"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe4"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_48_80dd@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1979, 1, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_48_80dd@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 48",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_48_80DD@EXAMPLE.COM",
                            NormalizedUserName = "USER_48_80DD",
                            PasswordHash = "oTBt3/6O4vP1F3T8qPGYW6qXy/DtbVW+5evizhogC46QcU4qoVKHLqOCJTg2F5GR",
                            PhoneNumber = "+1234567848",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_48_80dd@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_48_80dd"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe5"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_49_c4a4@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1979, 2, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_49_c4a4@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 49",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_49_C4A4@EXAMPLE.COM",
                            NormalizedUserName = "USER_49_C4A4",
                            PasswordHash = "Sq9FQwzGSDo3Z5wsGnlWqj9xdPxti9XBmO054brWv1UqcW4rBOs2GlRkhLHv+u9m",
                            PhoneNumber = "+1234567849",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_49_c4a4@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_49_c4a4"
                        },
                        new
                        {
                            Id = new Guid("7fb725c6-3250-b856-604e-69f27e228fe6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "user_50_b2fe@example.com",
                            CreatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            DateOfBirth = new DateTime(1979, 3, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user_50_b2fe@example.com",
                            EmailConfirmed = false,
                            FailedLoginAttempts = 0,
                            FirstName = "User 50",
                            IsActive = true,
                            IsAdmin = false,
                            IsBannedByAdmin = false,
                            IsBlocked = false,
                            IsDeleted = false,
                            IsEditor = false,
                            IsGuest = false,
                            IsLockedOut = false,
                            IsModerator = false,
                            IsPending = false,
                            IsStandardUser = true,
                            IsSuperAdmin = false,
                            IsUser = true,
                            IsVerified = true,
                            LastLogin = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            LastName = "Example",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER_50_B2FE@EXAMPLE.COM",
                            NormalizedUserName = "USER_50_B2FE",
                            PasswordHash = "MEDaJwOxNnn1Tzc/M0nVYgsl8C4DcqUPP7pmTmkJNaZNoD/L69tVTCRFzW7YRk3q",
                            PhoneNumber = "+1234567850",
                            PhoneNumberConfirmed = true,
                            ProfilePicture = "https://asafarim.com/logoT.svg",
                            SecurityStamp = "user_50_b2fe@example.com",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2025, 2, 17, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = new Guid("8048da39-cdaf-47a9-9fb1-960d81dd704a"),
                            UserName = "user_50_b2fe"
                        });
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserAccessibilityPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccessibilityPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "AccessibilityPreferenceId");

                    b.HasIndex("AccessibilityPreferenceId");

                    b.ToTable("UserAccessibilityPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserGeographicalPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("GeographicalPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "GeographicalPreferenceId");

                    b.HasIndex("GeographicalPreferenceId");

                    b.ToTable("UserGeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserLanguagePreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("LanguagePreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "LanguagePreferenceId");

                    b.HasIndex("LanguagePreferenceId");

                    b.ToTable("UserLanguagePreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserMiscellaneousPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MiscellaneousPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "MiscellaneousPreferenceId");

                    b.HasIndex("MiscellaneousPreferenceId");

                    b.ToTable("UserMiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserNotificationPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("NotificationPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "NotificationPreferenceId");

                    b.HasIndex("NotificationPreferenceId");

                    b.ToTable("UserNotificationPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserPrivacyPreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PrivacyPreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "PrivacyPreferenceId");

                    b.HasIndex("PrivacyPreferenceId");

                    b.ToTable("UserPrivacyPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserThemePreference", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ThemePreferenceId")
                        .HasColumnType("char(36)");

                    b.HasKey("UserId", "ThemePreferenceId");

                    b.HasIndex("ThemePreferenceId");

                    b.ToTable("UserThemePreferences");
                });

            modelBuilder.Entity("CategoryPost", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("char(36)");

                    b.HasKey("CategoriesId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("CategoryPost");
                });

            modelBuilder.Entity("CommentPost", b =>
                {
                    b.Property<Guid>("CommentsId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("char(36)");

                    b.HasKey("CommentsId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("CommentPost");
                });

            modelBuilder.Entity("LinkPost", b =>
                {
                    b.Property<Guid>("LinksId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("PostsId")
                        .HasColumnType("char(36)");

                    b.HasKey("LinksId", "PostsId");

                    b.HasIndex("PostsId");

                    b.ToTable("LinkPost");
                });

            modelBuilder.Entity("SitemapItemTopic", b =>
                {
                    b.Property<Guid>("SitemapItemId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TopicsId")
                        .HasColumnType("char(36)");

                    b.HasKey("SitemapItemId", "TopicsId");

                    b.HasIndex("TopicsId");

                    b.ToTable("SitemapItemTopic");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Attachment", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("Attachments")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Comment", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.GeographicalPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Country", "Country")
                        .WithMany("GeographicalPreferences")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.DateFormat", "DateFormat")
                        .WithMany("GeographicalPreferences")
                        .HasForeignKey("DateFormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.TimeZone", "TimeZone")
                        .WithMany("GeographicalPreferences")
                        .HasForeignKey("TimeZoneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Currency");

                    b.Navigation("DateFormat");

                    b.Navigation("TimeZone");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFile", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.User", null)
                        .WithMany("AuthoredMarkdownFiles")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "ParentMdFile")
                        .WithMany()
                        .HasForeignKey("ParentMdFileId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ASafariM.Domain.Entities.Project", "Project")
                        .WithMany("MarkdownFiles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ParentMdFile");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileHistory", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "MarkdownFile")
                        .WithMany("History")
                        .HasForeignKey("MarkdownFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarkdownFile");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFileUser", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "MarkdownFile")
                        .WithMany("MarkdownFileUsers")
                        .HasForeignKey("MarkdownFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany("MarkdownFileUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MarkdownFile");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MiscellaneousPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.FileFormat", "FileFormat")
                        .WithMany("MiscellaneousPreferences")
                        .HasForeignKey("FileFormatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.PaginationSettings", "PaginationSettings")
                        .WithMany("MiscellaneousPreferences")
                        .HasForeignKey("PaginationSettingsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FileFormat");

                    b.Navigation("PaginationSettings");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Post", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostAttachment", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Attachment", "Attachment")
                        .WithMany()
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostAttachments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostCategory", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostCategories")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostCollaborator", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.User", "Collaborator")
                        .WithMany()
                        .HasForeignKey("CollaboratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostCollaborators")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collaborator");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostComment", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostComments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostLink", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostLinks")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Link");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostRelatedPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostRelatedPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", "RelatedPost")
                        .WithMany()
                        .HasForeignKey("RelatedPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("RelatedPost");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostRelationships.PostTag", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PostTopic", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", "Post")
                        .WithMany("PostTopics")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Topic", "Topic")
                        .WithMany("PostTopics")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProgressHistory", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Project", "Project")
                        .WithOne("Progress")
                        .HasForeignKey("ASafariM.Domain.Entities.ProgressHistory", "ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Project", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MarkdownFile", null)
                        .WithMany("Projects")
                        .HasForeignKey("MarkdownFileId");

                    b.HasOne("ASafariM.Domain.Entities.User", "Owner")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", null)
                        .WithMany("ManagedProjects")
                        .HasForeignKey("UserId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ProjectMember", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany("ProjectMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.SitemapItem", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.SitemapItem", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ASafariM.Domain.Entities.SitemapItem", null)
                        .WithMany("ChildItems")
                        .HasForeignKey("SitemapItemId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Tag", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Comment", null)
                        .WithMany("Tags")
                        .HasForeignKey("CommentId");

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("Tags")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.ThemePreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.LanguagePreference", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Topic", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Topic", "ParentTopic")
                        .WithMany("ChildTopics")
                        .HasForeignKey("ParentTopicId");

                    b.Navigation("ParentTopic");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.User", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany("Collaborators")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserAccessibilityPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.AccessibilityPreference", "AccessibilityPreference")
                        .WithMany()
                        .HasForeignKey("AccessibilityPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessibilityPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserGeographicalPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.GeographicalPreference", "GeographicalPreference")
                        .WithMany()
                        .HasForeignKey("GeographicalPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeographicalPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserLanguagePreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.LanguagePreference", "LanguagePreference")
                        .WithMany()
                        .HasForeignKey("LanguagePreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguagePreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserMiscellaneousPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.MiscellaneousPreference", "MiscellaneousPreference")
                        .WithMany()
                        .HasForeignKey("MiscellaneousPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MiscellaneousPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserNotificationPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.NotificationPreference", "NotificationPreference")
                        .WithMany()
                        .HasForeignKey("NotificationPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserPrivacyPreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.PrivacyPreference", "PrivacyPreference")
                        .WithMany()
                        .HasForeignKey("PrivacyPreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivacyPreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.UserThemePreference", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.ThemePreference", "ThemePreference")
                        .WithMany()
                        .HasForeignKey("ThemePreferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ThemePreference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CategoryPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommentPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Comment", null)
                        .WithMany()
                        .HasForeignKey("CommentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LinkPost", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.Link", null)
                        .WithMany()
                        .HasForeignKey("LinksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Post", null)
                        .WithMany()
                        .HasForeignKey("PostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SitemapItemTopic", b =>
                {
                    b.HasOne("ASafariM.Domain.Entities.SitemapItem", null)
                        .WithMany()
                        .HasForeignKey("SitemapItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASafariM.Domain.Entities.Topic", null)
                        .WithMany()
                        .HasForeignKey("TopicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Comment", b =>
                {
                    b.Navigation("Replies");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Country", b =>
                {
                    b.Navigation("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.DateFormat", b =>
                {
                    b.Navigation("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.FileFormat", b =>
                {
                    b.Navigation("MiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.MarkdownFile", b =>
                {
                    b.Navigation("History");

                    b.Navigation("MarkdownFileUsers");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.PaginationSettings", b =>
                {
                    b.Navigation("MiscellaneousPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Post", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Collaborators");

                    b.Navigation("PostAttachments");

                    b.Navigation("PostCategories");

                    b.Navigation("PostCollaborators");

                    b.Navigation("PostComments");

                    b.Navigation("PostLinks");

                    b.Navigation("PostRelatedPosts");

                    b.Navigation("PostTags");

                    b.Navigation("PostTopics");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Project", b =>
                {
                    b.Navigation("MarkdownFiles");

                    b.Navigation("Progress");

                    b.Navigation("ProjectMembers");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.SitemapItem", b =>
                {
                    b.Navigation("ChildItems");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Tag", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.TimeZone", b =>
                {
                    b.Navigation("GeographicalPreferences");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.Topic", b =>
                {
                    b.Navigation("ChildTopics");

                    b.Navigation("PostTopics");
                });

            modelBuilder.Entity("ASafariM.Domain.Entities.User", b =>
                {
                    b.Navigation("AuthoredMarkdownFiles");

                    b.Navigation("ManagedProjects");

                    b.Navigation("MarkdownFileUsers");

                    b.Navigation("OwnedProjects");

                    b.Navigation("Posts");

                    b.Navigation("ProjectMemberships");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
