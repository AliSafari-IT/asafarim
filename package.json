{
  "name": "asafarim",
  "version": "1.2.5",
  "repository": "https://github.com/AliSafari-IT/asafarim.git",
  "private": true,
  "type": "module",
  "author": "Ali Safari <asafarim@gmail.com>",
  "scripts": {
    "preinstall": "npx only-allow pnpm",
    "publishToASafariM": "bash ./publish.sh",
    "asm": "bash ./publish.sh",
    "asm:be": "bash ./publish.be.sh",
    "asm:com": "bash ./publish.com.sh",
    "asm:cli": "echo \"7\" | bash ./publish.sh",
    "deploy:cli": "bash ./deploy-cli.sh",
    "nt:install": "pnpm --filter asafarim-terminal install",
    "nt:rebuild": "pnpm --filter asafarim-terminal rebuild node-pty --loglevel verbose",
    "nt:server": "cd /var/www/asafarim/ASafariM.Clients/node-terminal && node server.js",
    "nt:clean": "pnpm --filter asafarim-terminal run clean",
    "restart:service:cli": "sudo systemctl daemon-reload && sudo systemctl restart asafarim-cli && sudo systemctl reload nginx",
    "nt:restart": "sudo pnpm restart:service:cli",
    "exT": "npx kill-port 3001 && pnpm --filter asafarim-terminal install > /var/www/asafarim/ASafariM.Clients/node-terminal/install.log 2>&1 && pnpm --filter asafarim-terminal rebuild node-pty >> /var/www/asafarim/ASafariM.Clients/node-terminal/install.log 2>&1 && touch /var/www/asafarim/ASafariM.Clients/node-terminal/node-terminal.log && node /var/www/asafarim/ASafariM.Clients/node-terminal/server.js >> /var/www/asafarim/ASafariM.Clients/node-terminal/node-terminal.log 2>&1 & sleep 3 && (xdg-open http://localhost:3001 || echo 'Open remote terminal manually: http://localhost:3001')",
    "clean": "pnpm store prune && dotnet clean ./ASafariM.Api/ASafariM.Api.csproj && dotnet clean ./ASafariM.Application/ASafariM.Application.csproj && dotnet clean ./ASafariM.Infrastructure/ASafariM.Infrastructure.csproj && dotnet clean ./ASafariM.Presentation/ASafariM.Presentation.csproj && dotnet clean ./ASafariM.Domain/ASafariM.Domain.csproj",
    "reinstall": "echo \" ðŸ“¦ Clearing cache and installing  dependencies...\" && pnpm store prune --all && pnpm clean && pnpm install",
    "runAll": "pnpm prepare:dev && concurrently \"pnpm --filter asafarim-api start\" \"pnpm --filter asafarim-ui start\" \"pnpm --filter asafarim-blog start\" \"pnpm --filter asafarim-bibliography start\"",
    "co": "git add . && python3 .github/scripts/generate_commit_message.py && git push",
    "reloadBash": "bash ./restart_shell.sh",
    "asafarim-api:publish": "bash -c 'set -e && cd /var/www/asafarim && git pull origin main && sudo rm -rf /var/www/asafarim-api/* && dotnet publish ASafariM.Api/ASafariM.Api.csproj -c Release -o /var/www/asafarim-api && sudo chown -R www-data:www-data /var/www/asafarim-api && sudo chmod -R 755 /var/www/asafarim-api && sudo systemctl restart asafarim-api'",
    "asafarim-ui:publish": "bash -c 'set -e && cd /var/www/asafarim && git pull origin main && pnpm --filter asafarim-ui build && sudo rm -rf /var/www/asafarim-com/public_html/* && sudo cp -r /var/www/asafarim/ASafariM.Clients/asafarim-ui/dist/* /var/www/asafarim-com/public_html/ && sudo chown -R www-data:www-data /var/www/asafarim-com/public_html && sudo chmod -R 755 /var/www/asafarim-com/public_html && sudo systemctl restart nginx'",
    "asafarim-bibliography:publish": "bash -c 'set -e && cd /var/www/asafarim && git pull origin main && pnpm --filter asafarim-bibliography build && sudo mkdir -p /var/www/asafarim-bibliography && sudo rm -rf /var/www/asafarim-bibliography/* && sudo cp -r /var/www/asafarim/ASafariM.Clients/asafarim-bibliography/dist/* /var/www/asafarim-bibliography/ && sudo chown -R www-data:www-data /var/www/asafarim-bibliography && sudo chmod -R 755 /var/www/asafarim-bibliography && sudo systemctl restart nginx'",
    "asafarim:publish": "pnpm asafarim-api:publish && pnpm asafarim-ui:publish",
    "restore": "dotnet restore ./ASafariM.Api/ASafariM.Api.csproj && dotnet restore ./ASafariM.Application/ASafariM.Application.csproj && dotnet restore ./ASafariM.Infrastructure/ASafariM.Infrastructure.csproj && dotnet restore ./ASafariM.Presentation/ASafariM.Presentation.csproj && dotnet restore ./ASafariM.Domain/ASafariM.Domain.csproj",
    "build": "dotnet build ./ASafariM.Api/ASafariM.Api.csproj && dotnet build ./ASafariM.Application/ASafariM.Application.csproj && dotnet build ./ASafariM.Infrastructure/ASafariM.Infrastructure.csproj && dotnet build ./ASafariM.Presentation/ASafariM.Presentation.csproj && dotnet build ./ASafariM.Domain/ASafariM.Domain.csproj",
    "ui": "pnpm --filter asafarim-ui start",
    "ui:build": "pnpm --filter asafarim-ui build",
    "ui:serve": "pnpm --filter asafarim-ui serve",
    "ui:install": "pnpm --filter asafarim-ui reinstall",
    "ui:rebuild": "pnpm --filter asafarim-ui rebuild",
    "bl": "pnpm --filter asafarim-blog start",
    "bl:install": "pnpm --filter asafarim-blog install",
    "blb": "pnpm --filter asafarim-blog build",
    "bls": "pnpm --filter asafarim-blog serve",
    "bib": "pnpm --filter asafarim-bibliography start",
    "bib:build": "pnpm --filter asafarim-bibliography build",
    "bib:serve": "pnpm --filter asafarim-bibliography serve",
    "bib:install": "pnpm --filter asafarim-bibliography install",
    "bib:rebuild": "pnpm --filter asafarim-bibliography rebuild",
    "pbk": "pnpm --filter asafarim-pbk start",
    "pbk:build": "pnpm --filter asafarim-pbk build",
    "pbk:serve": "pnpm --filter asafarim-pbk serve",
    "pbk:install": "pnpm --filter asafarim-pbk install",
    "pbk:rebuild": "pnpm --filter asafarim-pbk rebuild",
    "pbk:test": "pnpm --filter asafarim-pbk test",
    "docs:build": "pnpm --filter asafarim-docs build",
    "docs:serve": "pnpm --filter asafarim-docs serve",
    "api": "pnpm prepare:dev && pnpm --filter asafarim-api start",
    "api:build": "pnpm clean && pnpm restore && pnpm build && dotnet build -c Release ./ASafariM.Api/ASafariM.Api.csproj",
    "api:run": "dotnet run --project ./ASafariM.Api/ASafariM.Api.csproj",
    "backend": "pnpm clean && pnpm restore && pnpm build && pnpm api",
    "backend:build": "pnpm clean && pnpm restore && pnpm build",
    "backend:run": "pnpm backend",
    "prepare:dev": "cd ./ASafariM.Api && copy .env.development .env && copy appsettings.Development.json appsettings.json && copy Properties\\launchSettings.development.json Properties\\launchSettings.json",
    "cleanup:dev": "pnpm prepare:dev && pnpm clean",
    "dev": "pnpm prepare:dev && concurrently \"pnpm --filter asafarim-api start\" \"pnpm --filter asafarim-ui start\" && pnpm cleanup:dev",
    "prepare:env": "cp .env.production .env && cp appsettings.Production.json appsettings.json && cp Properties/launchSettings.production.json Properties/launchSettings.json",
    "app": "concurrently \"pnpm backend\" \"pnpm ui\"",
    "start": "concurrently \"pnpm backend\" \"pnpm ui\"",
    "mig": "bash ./scripts/bash_files/dotnet-ef.sh",
    "addMig": "bash ./scripts/bash_files/add-migration.sh",
    "delMig": "dotnet ef migrations remove --project ASafariM.Infrastructure --startup-project ASafariM.Api",
    "test:backend": "dotnet test ASafariM.Test/ASafariM.Test.csproj --logger \"trx;LogFileName=tests/backend/backend_test_results.trx\"",
    "test:frontend": "mkdir -p tests/frontend && TIMESTAMP=$(date +%Y%m%d-%H%M) && node --max-old-space-size=4096 node_modules/vitest/vitest.mjs run --reporter=verbose --reporter=json --outputFile=tests/frontend/all_test_results_$TIMESTAMP.json --no-coverage",
    "test:script": "node ./scripts/test-scripts/verify-tests.js",
    "test:verify": "node ./scripts/test-scripts/verify-tests.js",
    "deploy:if-tests-pass": "pnpm test:backend && pnpm test:verify && node ./scripts/publish-with-frontend-tests.js",
    "test:frontend:ui": "mkdir -p tests/frontend && TIMESTAMP=$(date +%Y%m%d-%H%M) && pnpm --filter asafarim-ui test --reporter=json --outputFile=tests/frontend/ui_test_results_$TIMESTAMP.json",
    "test:frontend:blog": "mkdir -p tests/frontend && TIMESTAMP=$(date +%Y%m%d-%H%M) && cd ASafariM.Clients/asafarim-blog && ../../node_modules/.bin/vitest run --config vitest.config.ts --reporter=json --outputFile=../../tests/frontend/blog_detailed_results_$TIMESTAMP.json",
    "test:frontend:bibliography": "mkdir -p tests/frontend && TIMESTAMP=$(date +%Y%m%d-%H%M) && cd ASafariM.Clients/asafarim-bibliography && ../../node_modules/.bin/vitest run --config vitest.config.ts --reporter=json --outputFile=../../tests/frontend/bibliography_detailed_results_$TIMESTAMP.json",
    "test:all": "mkdir -p tests/backend tests/frontend && pnpm test:backend && pnpm test:frontend",
    "tbw": "pnpm test:backend:watch",
    "test:backend:watch": "cd ASafariM.Test && dotnet watch test --logger \"trx;LogFileName=TestResults/test_results.trx\""
  },
  "dependencies": {
    "lodash": "^4.17.21"
  },
  "devDependencies": {
    "@testing-library/jest-dom": "^6.0.0",
    "@testing-library/react": "^16.2.0",
    "@testing-library/react-hooks": "^8.0.1",
    "@types/jest": "^29.5.14",
    "@types/react-test-renderer": "^18",
    "@vitejs/plugin-react": "^4.3.4",
    "concurrently": "^9.1.2",
    "cross-env": "^7.0.3",
    "jest": "^29.7.0",
    "ts-jest": "^29.3.0",
    "vite": "^5.0.0",
    "vitest": "^3.1.3"
  },
  "pnpm": {
    "overrides": {
      "node-pty": "1.1.0-beta34"
    },
    "onlyBuiltDependencies": [
      "node-pty"
    ]
  },
  "packageManager": "pnpm@10.11.0"
}